{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["sauzANiCu1cy","PYQSlfx39ATO"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard"},"cells":[{"cell_type":"markdown","source":["# Importing the requisite libraries and datasets:"],"metadata":{"id":"yAq8Mb80uI6s"}},{"cell_type":"code","source":["!pip install ydata_profiling"],"metadata":{"id":"JNw3hCkRORtf"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":1,"metadata":{"id":"pX2zwBkjT8F6","executionInfo":{"status":"ok","timestamp":1684041401478,"user_tz":-600,"elapsed":1774,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}}},"outputs":[],"source":["import numpy\n","import pandas\n","\n","from scipy.stats import randint\n","\n","from sklearn.svm import SVC\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.linear_model import LogisticRegression\n","\n","from sklearn.ensemble import ExtraTreesClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","\n","from sklearn.neural_network import MLPRegressor\n","from sklearn.neural_network import MLPClassifier\n","\n","from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import RandomizedSearchCV\n","\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.metrics import accuracy_score, f1_score"]},{"cell_type":"code","source":["#import ydata_profiling as pandas_profiling\n","\n","import matplotlib.pyplot\n","import altair\n","from plotnine import  *"],"metadata":{"id":"KdcRqKyHjKoG","executionInfo":{"status":"ok","timestamp":1684041406692,"user_tz":-600,"elapsed":1956,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"5DsveI75w2xv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684041428254,"user_tz":-600,"elapsed":20428,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"820b63e2-cceb-49ee-d689-bd7ccbe11829"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["column_titles = \"id, ccf, age, sex, painloc, painexer, relrest, pncaden, cp, trestbps, htn, chol, smoke, cigs, years, fbs, dm, famhist, restecg, ekgmo, ekgday, ekgyr, dig, prop, nitr, pro, diuretic, proto, thaldur, thaltime, met, thalach, thalrest, tpeakbps, tpeakbpd, dummy, trestbpd, exang, xhypo, oldpeak, slope, rldv5, rldv5e, ca, restckm, exerckm, restef, restwm, exeref, exerwm, thal, thalsev, thalpul, earlobe, cmo, cday, cyr, num, lmt, ladprox, laddist, diag, cxmain, ramus, om1, om2, rcaprox, rcadist, lvx1, lvx2, lvx3, lvx4, lvf, cathef, junk\"\n","important_titles = \"age, sex, cp, trestbps, chol, cigs, years, fbs, dm, famhist, restecg, prop, nitr, pro, diuretic, thalach, thalrest, tpeakbps, tpeakbpd, trestbpd, exang, oldpeak, slope, ca, thal, num\"\n","categorical_titles = \"sex, cp, fbs, dm, famhist, restecg, prop, nitr, pro, diuretic, exang, slope, ca, thal, num\"\n","numerical_titles = \"age, trestbps, chol, cigs, years, thalach, thalrest, tpeakbps, tpeakbpd, trestbpd, oldpeak\"\n","\n","reccomended_columns = [\"age\", \"sex\", \"cp\", \"trestbps\", \"chol\", \"fbs\", \"restecg\", \"thalach\", \"exang\", \"oldpeak\", \"slope\", \"ca\", \"thal\", \"num\"]\n","tuning_columns = [\"cp\", \"thalach\", \"exang\", \"chol\", \"oldpeak\", \"age\", \"slope\", \"num\"]\n","\n","all_columns = column_titles.split(sep=\", \")\n","important_columns = important_titles.split(sep=\", \")\n","categorical_columns = categorical_titles.split(sep=\", \")\n","numerical_columns = numerical_titles.split(sep=\", \")\n","\n","print(\"Total number of columns in dataset : \", len(all_columns))\n","print(\"Number of columns deemed important : \", len(important_columns))\n","print(\"Number of columns reccomended by other research papers : \", len(reccomended_columns))"],"metadata":{"id":"ufcQbgOv0Hj8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684041449403,"user_tz":-600,"elapsed":321,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"42bf8d3b-51ab-495c-9b5f-90d7a7b1be1e"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Total number of columns in dataset :  75\n","Number of columns deemed important :  26\n","Number of columns reccomended by other research papers :  14\n"]}]},{"cell_type":"code","source":["def getDataFrame(filePath):\n","  file = open(filePath)\n","  data = []\n","  lines = file.read()\n","  lines = lines.replace(\"\\n\", \" \", -1).split(sep=\"name\")\n","  for line in lines:\n","    line = line.strip()\n","    row = line.split(sep=\" \")\n","    data.append(row)\n","  dataFrame = pandas.DataFrame(data, columns=all_columns)\n","  targetField = dataFrame.pop(\"num\")\n","  dataFrame.insert(74, \"num\", targetField)\n","  return dataFrame"],"metadata":{"id":"ENa71IQwPCUf","executionInfo":{"status":"ok","timestamp":1684041451109,"user_tz":-600,"elapsed":313,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Import the datasets:\n","\n","dataFrame_1 = getDataFrame(\"/content/drive/MyDrive/DSI/Project/Datasets/switzerland.data\")\n","print(dataFrame_1.shape)\n","\n","dataFrame_2 = getDataFrame(\"/content/drive/MyDrive/DSI/Project/Datasets/hungarian.data\")\n","print(dataFrame_2.shape)\n","\n","\n","dataFrame_3 = getDataFrame(\"/content/drive/MyDrive/DSI/Project/Datasets/long-beach-va.data\")\n","print(dataFrame_3.shape)\n","\n","\n","dataFrame_4 = getDataFrame(\"/content/drive/MyDrive/DSI/Project/Datasets/cleveland.data\")\n","print(dataFrame_4.shape)"],"metadata":{"id":"FGX8XrgBPScA","executionInfo":{"status":"ok","timestamp":1684041456229,"user_tz":-600,"elapsed":3447,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"bdb98009-d87f-4ba3-f9c4-72eede6ce9c9"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["(124, 75)\n","(295, 75)\n","(201, 75)\n","(283, 75)\n"]}]},{"cell_type":"code","source":["# Provide some basic descriptive statistic for each dataset:\n","\n","print(\"Data Frame 1:\")\n","print(dataFrame_1.info)\n","print(dataFrame_1.describe())\n","\n","print(\"\\nData Frame 2:\")\n","print(dataFrame_2.info)\n","print(dataFrame_2.describe())\n","\n","print(\"\\nData Frame 3:\")\n","print(dataFrame_3.info)\n","print(dataFrame_3.describe())\n","\n","print(\"\\nData Frame 4:\")\n","print(dataFrame_4.info)\n","print(dataFrame_4.describe())"],"metadata":{"id":"cIqGc4oJUM-O"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Cleaning the dataset:"],"metadata":{"id":"Y0zhUIaRuT1V"}},{"cell_type":"code","source":["# Check the count of existing null value fields and disply those columns:\n","\n","print(\"\\nDataFrame 1:\")\n","print(dataFrame_1[dataFrame_1.isnull().any(axis=1)])\n","\n","print(\"\\nDataFrame 2:\")\n","print(dataFrame_2[dataFrame_2.isnull().any(axis=1)])\n","\n","print(\"\\nDataFrame 3:\")\n","print(dataFrame_3[dataFrame_3.isnull().any(axis=1)])\n","\n","print(\"\\nDataFrame 4:\")\n","print(dataFrame_4[dataFrame_4.isnull().any(axis=1)])"],"metadata":{"id":"2T20yNDCuR5g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Drop any rows containing null values:\n","\n","dataFrame_1.dropna(how=\"any\", inplace=True)\n","dataFrame_2.dropna(how=\"any\", inplace=True)\n","dataFrame_3.dropna(how=\"any\", inplace=True)\n","dataFrame_4.dropna(how=\"any\", inplace=True)"],"metadata":{"id":"JPtlvZ0ET3oj","executionInfo":{"status":"ok","timestamp":1684041458290,"user_tz":-600,"elapsed":372,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# Check any columns still containing null after cleaning:\n","\n","print(\"\\nDataFrame 1:\")\n","print(dataFrame_1[dataFrame_1.isnull().any(axis=1)])\n","\n","print(\"\\nDataFrame 2:\")\n","print(dataFrame_2[dataFrame_2.isnull().any(axis=1)])\n","\n","print(\"\\nDataFrame 3:\")\n","print(dataFrame_3[dataFrame_3.isnull().any(axis=1)])\n","\n","print(\"\\nDataFrame 4:\")\n","print(dataFrame_4[dataFrame_4.isnull().any(axis=1)])"],"metadata":{"id":"X51RhRgQSY6Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# This function replaces dummy values or error values with appropriate values that can actually be used by the regression models going forward.\n","# For example, we are replacing the '-9's in the dataFrames with an appropriate '0' value in the columns for cigarettes and years smoked.\n","\n","def replaceValues(dataFrame):\n","  dataFrame[\"dm\"] = dataFrame[\"dm\"].replace(\"-9\", \"0\")\n","  dataFrame[\"cigs\"] = dataFrame[\"cigs\"].replace(\"-9\", \"0\")\n","  dataFrame[\"years\"] = dataFrame[\"years\"].replace(\"-9\", \"0\")\n","\n","  dataFrame[\"ca\"] = dataFrame[\"ca\"].replace(\"-9\", \"0\")\n","  dataFrame[\"thal\"] = dataFrame[\"thal\"].replace(\"-9\", \"3\")\n","\n","  dataFrame[\"nitr\"] = dataFrame[\"nitr\"].replace(\"-9\", \"0\")\n","  dataFrame[\"prop\"] = dataFrame[\"prop\"].replace(\"-9\", \"0\")\n","  dataFrame[\"pro\"] = dataFrame[\"pro\"].replace(\"-9\", \"0\")\n","  dataFrame[\"diuretic\"] = dataFrame[\"diuretic\"].replace(\"-9\", \"0\")\n","  dataFrame[\"restecg\"] = dataFrame[\"restecg\"].replace(\"-9\", \"0\")\n","\n","  dataFrame[\"trestbps\"] = dataFrame[\"trestbps\"].replace(\"-9\", \"0\")\n","  dataFrame[\"chol\"] = dataFrame[\"chol\"].replace(\"-9\", \"0\")\n","  dataFrame[\"fbs\"] = dataFrame[\"fbs\"].replace(\"-9\", \"0\")\n","  dataFrame[\"famhist\"] = dataFrame[\"famhist\"].replace(\"-9\", \"0\")\n","  dataFrame[\"thalach\"] = dataFrame[\"thalach\"].replace(\"-9\", \"0\")\n","  dataFrame[\"thalrest\"] = dataFrame[\"thalrest\"].replace(\"-9\", \"0\")\n","\n","  dataFrame[\"tpeakbps\"] = dataFrame[\"tpeakbps\"].replace(\"-9\", \"0\")\n","  dataFrame[\"tpeakbpd\"] = dataFrame[\"tpeakbpd\"].replace(\"-9\", \"0\")\n","  dataFrame[\"trestbpd\"] = dataFrame[\"trestbpd\"].replace(\"-9\", \"0\")\n","\n","  dataFrame[\"exang\"] = dataFrame[\"exang\"].replace(\"-9\", \"0\")\n","  dataFrame[\"oldpeak\"] = dataFrame[\"oldpeak\"].replace(\"-9\", \"0\")\n","  dataFrame[\"slope\"] = dataFrame[\"slope\"].replace(\"-9\", \"0\")\n","\n","  #dataFrame[\"num\"] = dataFrame[\"num\"].replace([\"1\", \"2\", \"3\", \"4\"], \"1\")\n","\n","  #dataFrame[['num','sex','cp','ca']] = dataFrame[['num','sex','cp','ca']].astype(\"category\")\n","  #dataFrame[['age','thalach']]=dataFrame[['age','thalach']].apply(pandas.to_numeric)\n","\n","  for col in dataFrame.columns:\n","    dataFrame[col] = numpy.float64(dataFrame[col])\n","\n","  return dataFrame"],"metadata":{"id":"v6fGZcWbiXRd","executionInfo":{"status":"ok","timestamp":1684041460199,"user_tz":-600,"elapsed":3,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["dataFrame_1 = replaceValues(dataFrame_1)\n","dataFrame_2 = replaceValues(dataFrame_2)\n","dataFrame_3 = replaceValues(dataFrame_3)\n","dataFrame_4 = replaceValues(dataFrame_4)"],"metadata":{"id":"ZZqIUUMYis-n","executionInfo":{"status":"ok","timestamp":1684041462092,"user_tz":-600,"elapsed":332,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["dataFrame = pandas.concat([dataFrame_1, dataFrame_2, dataFrame_3, dataFrame_4])\n","dataFrame_smaller = dataFrame[tuning_columns]\n","dataFrame_bigger = dataFrame[important_columns]\n","dataFrame.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cytEuzy1w6wT","executionInfo":{"status":"ok","timestamp":1684041464029,"user_tz":-600,"elapsed":5,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"0e771be3-f89f-4ad6-b035-befc3224ae0b"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(899, 75)"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["# Descriptive Statistics and Exploration:"],"metadata":{"id":"sauzANiCu1cy"}},{"cell_type":"code","source":["pandas_profiling.ProfileReport(dataFrame_1[reccomended_columns])"],"metadata":{"id":"OznCCR0_UnI9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pandas_profiling.ProfileReport(dataFrame_2[reccomended_columns])"],"metadata":{"id":"0ClhpZBtW3Oi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pandas_profiling.ProfileReport(dataFrame_3[reccomended_columns])"],"metadata":{"id":"6dOLUGt_W4nD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pandas_profiling.ProfileReport(dataFrame_4[reccomended_columns])"],"metadata":{"id":"AGcxinfxW5y0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Visulisation of the attributes in the dataset using the plotnine package:"],"metadata":{"id":"PYQSlfx39ATO"}},{"cell_type":"code","source":["# Distribution Graph of age by Heart Disease\n","(\n","  ggplot(dataFrame_4)\n","  +aes(x=\"age\", fill=(\"num\")) +\n","  geom_density(alpha = 0.8)+\n","  ggtitle(\"Age by Heart Disease\") +\n","  xlab(\"Age\")+\n","  scale_fill_discrete(name = \"Heart Disease\", labels = [\"Yes\", \"No\"])\n",")"],"metadata":{"id":"LSb91YnS8odk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Distribution Graph of Age by Sex\n","(\n","  ggplot(dataFrame_4)\n","  +aes(x=\"age\", fill=(\"sex\")) +\n","  geom_density(alpha = 0.8)+\n","  ggtitle(\"Age by Sex\") +\n","  xlab(\"Age\")+\n","  scale_fill_discrete(name = \"Sex\", labels = [\"Male\", \"Female\"])\n",")"],"metadata":{"id":"JZmThKwJ9wxA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Distribution Graph of Max Heart Rate by Heart Disease\n","(\n","  ggplot(dataFrame_4)\n","  +aes(x=\"thalach\", fill=(\"num\")) +\n","  geom_density(alpha = 0.8)+\n","  ggtitle(\"Max Heart Rate by Heart Disease\") +\n","  xlab(\"Max Heart Rate\")+\n","  scale_fill_discrete(name = \"Heart Disease\", labels = [\"Yes\", \"No\"])\n",")"],"metadata":{"id":"GAzBZSwt-GKo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Distribution Graph of Max Heart Rate by Sex\n","(\n","  ggplot(dataFrame_4)\n","  +aes(x=\"thalach\", fill=(\"sex\")) +\n","  geom_density(alpha = 0.8)+\n","  ggtitle(\"Max Heart Rate by Sex\") +\n","  xlab(\"Max Heart Rate\")+\n","  scale_fill_discrete(name = \"Sex\", labels = [\"Male\", \"Female\"])\n",")"],"metadata":{"id":"Rhhvr9dn-GKp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Bar Chart of Heart Disease Condition segmented by Chest Pain Type\n","(\n","  ggplot(dataFrame_4)\n","  +aes( x=\"num\", fill=(\"cp\")) +\n","  geom_bar()\n","  +ggtitle(\"Chest Pain Type by Heart Disease\") \n","  +scale_fill_discrete(name=\"Chest Pain Type\",labels=[\"Value 1: typical angina\", \"Value 2: atypical angina\", \"Value 3: non-anginal pain\", \"Value 4: asymptomatic\"])\n","  +xlab(\"Heart Disease Condition\") +\n","  ylab(\"Count\") \n",")"],"metadata":{"id":"z0vU6Pe5t77J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Bar Chart of Heart Disease Condition Segmented by Number of Major Vessels\n","(\n","  ggplot(dataFrame_4)\n","  +aes( x=\"num\", fill=(\"ca\")) +\n","  geom_bar()\n","  +ggtitle(\"Number of Major Vessels by Heart Disease\") \n","  +scale_fill_discrete(name=\"Number of major vessels\")\n","  +xlab(\"Heart Disease Condition\") +\n","  ylab(\"Count\") \n",")"],"metadata":{"id":"0QTH1Bd3x-qE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pandas_profiling.ProfileReport(dataFrame)"],"metadata":{"id":"o6Cd-HssYKbo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Classification:"],"metadata":{"id":"9Ct9zAXPiwBv"}},{"cell_type":"markdown","source":["### Logistic Regression."],"metadata":{"id":"OZUQ7M1ikXrZ"}},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.15, random_state=42)"],"metadata":{"id":"Sa33pe3sivxW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["logisticRegression = LogisticRegression(solver=\"newton-cholesky\", class_weight=\"balanced\")\n","logisticRegression.fit(X_train, y_train)\n","y_train_preds = logisticRegression.predict(X_train)\n","y_test_preds = logisticRegression.predict(X_test)\n","\n","print(\"\\nTraining Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_train, y_train_preds))\n","print(\"F1 Score : \", f1_score(y_train, y_train_preds, average='weighted'))\n","\n","print(\"\\nTesting Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_test, y_test_preds))\n","print(\"F1 Score : \", f1_score(y_test, y_test_preds, average='weighted'))\n","\n","print(\"\\nConfusion Matrix for Training :\\n\", confusion_matrix(y_train, y_train_preds, labels=logisticRegression.classes_))\n","print(\"\\nConfusion Matrix for Testing :\\n\", confusion_matrix(y_test, y_test_preds, labels=logisticRegression.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wrSJ4wqgi6zV","executionInfo":{"status":"ok","timestamp":1683876097409,"user_tz":-600,"elapsed":518,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"a7f01a9f-c2e7-492a-9583-4988a006f97f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Training Data :\n","Accuracy Score :  0.8180628272251309\n","F1 Score :  0.8182350475929975\n","\n","Testing Data :\n","Accuracy Score :  0.8444444444444444\n","F1 Score :  0.8452899957475918\n","\n","Confusion Matrix for Training :\n"," [[282  65]\n"," [ 74 343]]\n","\n","Confusion Matrix for Testing :\n"," [[50  7]\n"," [14 64]]\n"]}]},{"cell_type":"code","source":["cross_val_score(logisticRegression, X_train, y_train, cv=10, scoring='accuracy')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xoOuCvcNw_0a","executionInfo":{"status":"ok","timestamp":1683876104078,"user_tz":-600,"elapsed":527,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"bd2d39f5-e5d0-4d95-e306-1ae6cb28ee37"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.83116883, 0.80519481, 0.76623377, 0.79220779, 0.80263158,\n","       0.76315789, 0.88157895, 0.81578947, 0.80263158, 0.75      ])"]},"metadata":{},"execution_count":144}]},{"cell_type":"markdown","source":["### Support Vector Classifier."],"metadata":{"id":"l-3VuVoNkdGO"}},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.15, random_state=42)"],"metadata":{"id":"Gu8sL_oTkhI3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["svc = SVC(class_weight=\"balanced\",\n","          kernel=\"linear\",\n","          C=1.0,\n","          gamma=0.001)\n","svc.fit(X_train, y_train)\n","\n","y_train_preds = svc.predict(X_train)\n","y_test_preds = svc.predict(X_test)\n","\n","print(\"\\n Training Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_train, y_train_preds))\n","print(\"F1 Score : \", f1_score(y_train, y_train_preds, average='weighted'))\n","\n","print(\"\\n Testing Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_test, y_test_preds))\n","print(\"F1 Score : \", f1_score(y_test, y_test_preds, average='weighted'))\n","\n","print(\"\\nConfusion Matrix for Training :\\n\", confusion_matrix(y_train, y_train_preds, labels=svc.classes_))\n","print(\"\\nConfusion Matrix for Testing :\\n\", confusion_matrix(y_test, y_test_preds, labels=svc.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zP_e_g7skuDp","executionInfo":{"status":"ok","timestamp":1683876751634,"user_tz":-600,"elapsed":20823,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"c89db9e9-0d74-409c-ace5-b4e2f080352e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Training Data :\n","Accuracy Score :  0.819371727748691\n","F1 Score :  0.8194141498395989\n","\n"," Testing Data :\n","Accuracy Score :  0.8814814814814815\n","F1 Score :  0.8817335920784196\n","\n","Confusion Matrix for Training :\n"," [[279  68]\n"," [ 70 347]]\n","\n","Confusion Matrix for Testing :\n"," [[50  7]\n"," [ 9 69]]\n"]}]},{"cell_type":"code","source":["cross_val_score(svc, X_train, y_train, cv=10, scoring='accuracy')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-43NcKL0xcaI","executionInfo":{"status":"ok","timestamp":1683876899808,"user_tz":-600,"elapsed":148179,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"7771540b-d67a-40c3-ef4c-5aa351900775"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.79220779, 0.83116883, 0.76623377, 0.76623377, 0.81578947,\n","       0.76315789, 0.86842105, 0.80263158, 0.81578947, 0.71052632])"]},"metadata":{},"execution_count":161}]},{"cell_type":"markdown","source":["### Decision Tree."],"metadata":{"id":"0EaE5VqYl4kR"}},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.15, random_state=42)"],"metadata":{"id":"GVVu-7cxl_S2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tree = DecisionTreeClassifier(class_weight=\"balanced\",\n","                              max_depth=6,\n","                              min_samples_leaf=20\n","                              )\n","tree.fit(X_train, y_train)\n","\n","y_train_preds = tree.predict(X_train)\n","y_test_preds = tree.predict(X_test)\n","\n","print(\"\\n Training Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_train, y_train_preds))\n","print(\"F1 Score : \", f1_score(y_train, y_train_preds, average='weighted'))\n","\n","print(\"\\n Testing Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_test, y_test_preds))\n","print(\"F1 Score : \", f1_score(y_test, y_test_preds, average='weighted'))\n","\n","print(\"\\nConfusion Matrix for Training :\\n\", confusion_matrix(y_train, y_train_preds, labels=tree.classes_))\n","print(\"\\nConfusion Matrix for Testing :\\n\", confusion_matrix(y_test, y_test_preds, labels=tree.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8ti_Gg15l664","executionInfo":{"status":"ok","timestamp":1683877780041,"user_tz":-600,"elapsed":4,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"e17318c4-d8db-4bd9-ef3d-224c27560743"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Training Data :\n","Accuracy Score :  0.824607329842932\n","F1 Score :  0.8239190129242485\n","\n"," Testing Data :\n","Accuracy Score :  0.8148148148148148\n","F1 Score :  0.8158214235090379\n","\n","Confusion Matrix for Training :\n"," [[268  79]\n"," [ 55 362]]\n","\n","Confusion Matrix for Testing :\n"," [[48  9]\n"," [16 62]]\n"]}]},{"cell_type":"code","source":["cross_val_score(tree, X_train, y_train, cv=10, scoring='accuracy')"],"metadata":{"id":"_zM3kVjRv3M2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683877782805,"user_tz":-600,"elapsed":10,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"165bb5f3-46d0-45c1-9926-d5f9e1473f50"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.79220779, 0.76623377, 0.74025974, 0.81818182, 0.65789474,\n","       0.78947368, 0.76315789, 0.76315789, 0.77631579, 0.69736842])"]},"metadata":{},"execution_count":181}]},{"cell_type":"markdown","source":["### Random Forest Algorithm"],"metadata":{"id":"cttcB_lwnW4P"}},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.15, random_state=42)"],"metadata":{"id":"me6HrmL8ncTc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["estimator = RandomForestClassifier(class_weight=\"balanced\",\n","                                   n_estimators=50,\n","                                   max_depth=8,\n","                                   min_samples_split=100\n","                                   )\n","estimator.fit(X_train, y_train)\n","\n","y_train_preds = estimator.predict(X_train)\n","y_test_preds = estimator.predict(X_test)\n","\n","print(\"\\nTraining Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_train, y_train_preds))\n","print(\"F1 Score : \", f1_score(y_train, y_train_preds, average='weighted'))\n","\n","print(\"\\nTesting Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_test, y_test_preds))\n","print(\"F1 Score : \", f1_score(y_test, y_test_preds, average='weighted'))\n","\n","print(\"\\nConfusion Matrix for Training :\\n\", confusion_matrix(y_train, y_train_preds, labels=estimator.classes_))\n","print(\"\\nConfusion Matrix for Testing :\\n\", confusion_matrix(y_test, y_test_preds, labels=estimator.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KfvQBYtaneib","executionInfo":{"status":"ok","timestamp":1683878184346,"user_tz":-600,"elapsed":8,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"04c56152-4667-430c-d49a-4e711baaf561"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Training Data :\n","Accuracy Score :  0.8390052356020943\n","F1 Score :  0.8386491581504838\n","\n","Testing Data :\n","Accuracy Score :  0.837037037037037\n","F1 Score :  0.8373836891078271\n","\n","Confusion Matrix for Training :\n"," [[278  69]\n"," [ 54 363]]\n","\n","Confusion Matrix for Testing :\n"," [[47 10]\n"," [12 66]]\n"]}]},{"cell_type":"code","source":["feature_importance = pandas.DataFrame(\n","    {\n","        'feature' : X_train.columns,\n","        'importance' : estimator.feature_importances_\n","    }\n",").sort_values('importance', ascending=False)\n","print(feature_importance)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xlyjwAjUCPgq","executionInfo":{"status":"ok","timestamp":1683878192840,"user_tz":-600,"elapsed":516,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"db344c51-867e-4aa6-f6bd-f2ceaa46ab6b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     feature  importance\n","2         cp    0.221230\n","20     exang    0.179469\n","15   thalach    0.143758\n","21   oldpeak    0.111132\n","22     slope    0.064582\n","4       chol    0.056367\n","24      thal    0.042275\n","1        sex    0.039568\n","16  thalrest    0.034765\n","0        age    0.024529\n","17  tpeakbps    0.011789\n","3   trestbps    0.010973\n","6      years    0.010554\n","23        ca    0.008384\n","19  trestbpd    0.008280\n","11      prop    0.007387\n","13       pro    0.007362\n","18  tpeakbpd    0.005381\n","5       cigs    0.004882\n","12      nitr    0.002880\n","7        fbs    0.002707\n","9    famhist    0.001087\n","8         dm    0.000634\n","10   restecg    0.000027\n","14  diuretic    0.000000\n"]}]},{"cell_type":"code","source":["cross_val_score(estimator, X_train, y_train, cv=10, scoring='accuracy')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wvxfdn_xoMfF","executionInfo":{"status":"ok","timestamp":1683878202262,"user_tz":-600,"elapsed":1209,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"803c6c9a-f0f6-4185-b092-418c59f67d43"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.79220779, 0.76623377, 0.83116883, 0.84415584, 0.80263158,\n","       0.76315789, 0.85526316, 0.75      , 0.81578947, 0.73684211])"]},"metadata":{},"execution_count":212}]},{"cell_type":"markdown","source":["### Extra Random Tree"],"metadata":{"id":"o9MysNVsKc1N"}},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.15, random_state=42)"],"metadata":{"id":"mdmdvL3RLZa2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["random_ranges = {\n","    'n_estimators': randint(50, 250),\n","    'min_samples_split': randint(150, 250),\n","    'max_leaf_nodes': randint(4, 64),\n","    'max_depth': randint(1,16)\n","}\n","\n","classifier = ExtraTreesClassifier(random_state=8, max_features=\"log2\", class_weight=\"balanced\")\n","\n","randomSearcher = RandomizedSearchCV(classifier, random_ranges, random_state=8, scoring='neg_root_mean_squared_error', cv=10, verbose=1)\n","randomSearcher.fit(X_train, y_train)\n","\n","print(randomSearcher.best_params_)\n","\n","estimator = randomSearcher.best_estimator_\n","\n","y_train_preds = estimator.predict(X_train)\n","y_test_preds = estimator.predict(X_test)\n","\n","print(\"\\nTraining Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_train, y_train_preds))\n","print(\"F1 Score : \", f1_score(y_train, y_train_preds, average='weighted'))\n","\n","print(\"\\nTesting Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_test, y_test_preds))\n","print(\"F1 Score : \", f1_score(y_test, y_test_preds, average='weighted'))\n","\n","print(\"\\nConfusion Matrix for Training :\\n\", confusion_matrix(y_train, y_train_preds, labels=estimator.classes_))\n","print(\"\\nConfusion Matrix for Testing :\\n\", confusion_matrix(y_test, y_test_preds, labels=estimator.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YvN4YKS_KfoM","executionInfo":{"status":"ok","timestamp":1683878297012,"user_tz":-600,"elapsed":27465,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"6ee4cbef-5e83-4338-f61f-0c0cb92f1388"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 10 folds for each of 10 candidates, totalling 100 fits\n","{'max_depth': 14, 'max_leaf_nodes': 25, 'min_samples_split': 210, 'n_estimators': 227}\n","\n","Training Data :\n","Accuracy Score :  0.8036649214659686\n","F1 Score :  0.8037543895861278\n","\n","Testing Data :\n","Accuracy Score :  0.837037037037037\n","F1 Score :  0.8376548716423828\n","\n","Confusion Matrix for Training :\n"," [[274  73]\n"," [ 77 340]]\n","\n","Confusion Matrix for Testing :\n"," [[48  9]\n"," [13 65]]\n"]}]},{"cell_type":"markdown","source":["# Neural Networks:"],"metadata":{"id":"N2uND5u8r_RV"}},{"cell_type":"markdown","source":["### Classification"],"metadata":{"id":"90hscUkJsDfq"}},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.12, random_state=42)"],"metadata":{"id":"G67PeeKntiVN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["hidden_layers = [512]\n","hidden_activation = 'relu'\n","solver_algo = 'lbfgs'\n","lr_init = 0.0025\n","lr = 'adaptive'\n","batch_size = 32\n","epochs = 200"],"metadata":{"id":"5KAB6y4FsF4g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["neuralNetwork = MLPClassifier(\n","    hidden_layer_sizes=hidden_layers, \n","    batch_size=batch_size, \n","    activation=hidden_activation, \n","    solver=solver_algo, \n","    learning_rate_init=lr_init, \n","    learning_rate = lr,\n","    max_iter=epochs,\n","    random_state=1\n",").fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AWytIoXcsZWG","executionInfo":{"status":"ok","timestamp":1683875928454,"user_tz":-600,"elapsed":7059,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"a63c3494-ac81-41c1-a7d7-0c0bc0cd3809"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:541: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"]}]},{"cell_type":"code","source":["y_train_preds = neuralNetwork.predict(X_train)\n","y_test_preds = neuralNetwork.predict(X_test)\n","\n","print(\"\\nTraining Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_train, y_train_preds))\n","print(\"F1 Score : \", f1_score(y_train, y_train_preds, average='weighted'))\n","\n","print(\"\\nTesting Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_test, y_test_preds))\n","print(\"F1 Score : \", f1_score(y_test, y_test_preds, average='weighted'))\n","\n","print(\"\\nConfusion Matrix for Training :\\n\", confusion_matrix(y_train, y_train_preds, labels=neuralNetwork.classes_))\n","print(\"\\nConfusion Matrix for Testing :\\n\", confusion_matrix(y_test, y_test_preds, labels=neuralNetwork.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TMcGZt1sszKs","executionInfo":{"status":"ok","timestamp":1683875936059,"user_tz":-600,"elapsed":443,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"7ff953c1-4dfd-463a-a689-dab20df70b39"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Training Data :\n","Accuracy Score :  0.8407079646017699\n","F1 Score :  0.8404837591652203\n","\n","Testing Data :\n","Accuracy Score :  0.8240740740740741\n","F1 Score :  0.8232853072853075\n","\n","Confusion Matrix for Training :\n"," [[289  68]\n"," [ 58 376]]\n","\n","Confusion Matrix for Testing :\n"," [[36 11]\n"," [ 8 53]]\n"]}]},{"cell_type":"markdown","source":["### Regression"],"metadata":{"id":"dTFfpR68wx04"}},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","#temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.12, random_state=42)"],"metadata":{"id":"ztDWEC1Aw06w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["hidden_layers = [128]\n","hidden_activation = 'relu'\n","solver_algo = 'adam'\n","lr_init = 0.001\n","lr = 'constant'\n","batch_size = 32\n","epochs = 5"],"metadata":{"id":"tEovXH15w3cq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["neuralNetwork = MLPRegressor(\n","    hidden_layer_sizes=hidden_layers, \n","    batch_size=batch_size, \n","    activation=hidden_activation, \n","    solver=solver_algo, \n","    learning_rate_init=lr_init, \n","    learning_rate = lr,\n","    max_iter=epochs,\n","    random_state=1\n",").fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RzOeggjHxDAe","executionInfo":{"status":"ok","timestamp":1683875048945,"user_tz":-600,"elapsed":12,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"dde92512-0f2b-4243-dd3b-747ee13359db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (5) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["y_train_preds = neuralNetwork.predict(X_train)\n","y_test_preds = neuralNetwork.predict(X_test)\n","\n","print(mean_squared_error(y_train, y_train_preds))\n","print(mean_absolute_error(y_train, y_train_preds))\n","\n","print(mean_squared_error(y_test, y_test_preds))\n","print(mean_absolute_error(y_test, y_test_preds))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GjfM7c7xxFhZ","executionInfo":{"status":"ok","timestamp":1683875336499,"user_tz":-600,"elapsed":10,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"83d1bfa3-d9ca-4357-e1e6-2b4ac166faa8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.469466300309081\n","1.2400532005903941\n","3.4079834012232197\n","1.4371570328254084\n"]}]},{"cell_type":"markdown","source":["# Regression:"],"metadata":{"id":"b9oADY-8t442"}},{"cell_type":"code","source":["from sklearn.linear_model import LinearRegression\n","from sklearn.preprocessing import PolynomialFeatures"],"metadata":{"id":"wa6MLf4BuCWR","executionInfo":{"status":"ok","timestamp":1684042522146,"user_tz":-600,"elapsed":342,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","#temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.12, random_state=42)"],"metadata":{"id":"VZf1xf4Mt8lU","executionInfo":{"status":"ok","timestamp":1684042523146,"user_tz":-600,"elapsed":2,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["poly = PolynomialFeatures(degree=2)\n","\n","X_train_poly = poly.fit_transform(X_train)\n","poly.fit_transform(X_test)\n","\n","poly.fit(X_train_poly, y_train)\n","\n","linReg = LinearRegression()\n","linReg.fit(X_train_poly, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"konYC7fvuKSq","executionInfo":{"status":"ok","timestamp":1684042562230,"user_tz":-600,"elapsed":8,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"410218d4-c569-4cd5-9b33-43696d366b24"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"],"text/html":["<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["y_train_preds = linReg.predict(poly.fit_transform(X_train))\n","y_test_preds = linReg.predict(poly.fit_transform(X_test))\n","\n","print(mean_squared_error(y_train, y_train_preds))\n","print(mean_absolute_error(y_train, y_train_preds))\n","\n","print(mean_squared_error(y_test, y_test_preds))\n","print(mean_absolute_error(y_test, y_test_preds))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_KHeI1HSvnM2","executionInfo":{"status":"ok","timestamp":1684042563696,"user_tz":-600,"elapsed":7,"user":{"displayName":"Tarun Krishnan","userId":"04307794948231036457"}},"outputId":"8b5d60b2-eedf-43c5-9b32-c1ffa9650eb6"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["0.46015970310576343\n","0.5140340110068075\n","1.9267453174436695\n","1.0056055105394788\n"]}]}]}