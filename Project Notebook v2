{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["sauzANiCu1cy","PYQSlfx39ATO"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard"},"cells":[{"cell_type":"markdown","source":["# Importing the requisite libraries and datasets:"],"metadata":{"id":"yAq8Mb80uI6s"}},{"cell_type":"code","source":["!pip install ydata_profiling"],"metadata":{"id":"JNw3hCkRORtf"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":37,"metadata":{"id":"pX2zwBkjT8F6","executionInfo":{"status":"ok","timestamp":1684849411234,"user_tz":-600,"elapsed":5,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"outputs":[],"source":["import numpy\n","import pandas\n","\n","from scipy.stats import randint\n","\n","from sklearn.linear_model import LinearRegression\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.preprocessing import PolynomialFeatures\n","\n","from sklearn.svm import SVC\n","from sklearn.tree import DecisionTreeClassifier\n","\n","from sklearn.ensemble import ExtraTreesClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","\n","from sklearn.neural_network import MLPRegressor\n","from sklearn.neural_network import MLPClassifier\n","\n","from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import RandomizedSearchCV\n","\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.metrics import accuracy_score, f1_score\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","source":["#import ydata_profiling as pandas_profiling\n","\n","import matplotlib.pyplot\n","import altair\n","from plotnine import  *"],"metadata":{"id":"KdcRqKyHjKoG","executionInfo":{"status":"ok","timestamp":1684849008989,"user_tz":-600,"elapsed":1750,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"5DsveI75w2xv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684849029931,"user_tz":-600,"elapsed":18969,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"cc1fbf47-94ad-4505-eb48-5a6a1cb82fa0"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["column_titles = \"id, ccf, age, sex, painloc, painexer, relrest, pncaden, cp, trestbps, htn, chol, smoke, cigs, years, fbs, dm, famhist, restecg, ekgmo, ekgday, ekgyr, dig, prop, nitr, pro, diuretic, proto, thaldur, thaltime, met, thalach, thalrest, tpeakbps, tpeakbpd, dummy, trestbpd, exang, xhypo, oldpeak, slope, rldv5, rldv5e, ca, restckm, exerckm, restef, restwm, exeref, exerwm, thal, thalsev, thalpul, earlobe, cmo, cday, cyr, num, lmt, ladprox, laddist, diag, cxmain, ramus, om1, om2, rcaprox, rcadist, lvx1, lvx2, lvx3, lvx4, lvf, cathef, junk\"\n","important_titles = \"age, sex, cp, trestbps, chol, fbs, restecg, prop, nitr, pro, diuretic, thalach, thalrest, tpeakbps, tpeakbpd, trestbpd, exang, oldpeak, slope, thal, num\"\n","categorical_titles = \"sex, cp, fbs, dm, famhist, restecg, prop, nitr, pro, diuretic, exang, slope, ca, thal, num\"\n","numerical_titles = \"age, trestbps, chol, cigs, years, thalach, thalrest, tpeakbps, tpeakbpd, trestbpd, oldpeak\"\n","\n","reccomended_columns = [\"age\", \"sex\", \"cp\", \"trestbps\", \"chol\", \"fbs\", \"restecg\", \"thalach\", \"exang\", \"oldpeak\", \"slope\", \"ca\", \"thal\", \"num\"]\n","tuning_columns = [\"cp\", \"thalach\", \"exang\", \"chol\", \"oldpeak\", \"age\", \"slope\", \"num\"]\n","\n","all_columns = column_titles.split(sep=\", \")\n","important_columns = important_titles.split(sep=\", \")\n","categorical_columns = categorical_titles.split(sep=\", \")\n","numerical_columns = numerical_titles.split(sep=\", \")\n","\n","print(\"Total number of columns in dataset : \", len(all_columns))\n","print(\"Number of columns deemed important : \", len(important_columns))\n","print(\"Number of columns reccomended by other research papers : \", len(reccomended_columns))"],"metadata":{"id":"ufcQbgOv0Hj8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684849031657,"user_tz":-600,"elapsed":6,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"af5c343b-dd36-480f-f3ca-ea2223a6bdd3"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Total number of columns in dataset :  75\n","Number of columns deemed important :  21\n","Number of columns reccomended by other research papers :  14\n"]}]},{"cell_type":"code","source":["def getDataFrame(filePath):\n","  file = open(filePath)\n","  data = []\n","  lines = file.read()\n","  lines = lines.replace(\"\\n\", \" \", -1).split(sep=\"name\")\n","  for line in lines:\n","    line = line.strip()\n","    row = line.split(sep=\" \")\n","    data.append(row)\n","  dataFrame = pandas.DataFrame(data, columns=all_columns)\n","  targetField = dataFrame.pop(\"num\")\n","  dataFrame.insert(74, \"num\", targetField)\n","  return dataFrame"],"metadata":{"id":"ENa71IQwPCUf","executionInfo":{"status":"ok","timestamp":1684849033273,"user_tz":-600,"elapsed":5,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# Import the datasets:\n","\n","dataFrame_1 = getDataFrame(\"/content/drive/My Drive/DSI/Project/Datasets/switzerland.data\")\n","print(dataFrame_1.shape)\n","\n","dataFrame_2 = getDataFrame(\"/content/drive/My Drive/DSI/Project/Datasets/hungarian.data\")\n","print(dataFrame_2.shape)\n","\n","\n","dataFrame_3 = getDataFrame(\"/content/drive/My Drive/DSI/Project/Datasets/long-beach-va.data\")\n","print(dataFrame_3.shape)\n","\n","\n","dataFrame_4 = getDataFrame(\"/content/drive/My Drive/DSI/Project/Datasets/cleveland.data\")\n","print(dataFrame_4.shape)"],"metadata":{"id":"FGX8XrgBPScA","executionInfo":{"status":"ok","timestamp":1684849039579,"user_tz":-600,"elapsed":3062,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d5b944bd-b5d5-452e-8b87-61f560e85df3"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["(124, 75)\n","(295, 75)\n","(201, 75)\n","(283, 75)\n"]}]},{"cell_type":"code","source":["# Provide some basic descriptive statistic for each dataset:\n","\n","print(\"Data Frame 1:\")\n","print(dataFrame_1.info)\n","print(dataFrame_1.describe())\n","\n","print(\"\\nData Frame 2:\")\n","print(dataFrame_2.info)\n","print(dataFrame_2.describe())\n","\n","print(\"\\nData Frame 3:\")\n","print(dataFrame_3.info)\n","print(dataFrame_3.describe())\n","\n","print(\"\\nData Frame 4:\")\n","print(dataFrame_4.info)\n","print(dataFrame_4.describe())"],"metadata":{"id":"cIqGc4oJUM-O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684849040565,"user_tz":-600,"elapsed":11,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"85d30a41-a424-4b51-8505-12f0e040cbbc"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Data Frame 1:\n","<bound method DataFrame.info of        id   ccf   age   sex painloc painexer relrest pncaden    cp trestbps  \\\n","0    3001     0    65     1       1        1       1      -9     4      115   \n","1    3002     0    32     1       0        0       0      -9     1       95   \n","2    3003     0    61     1       1        1       1      -9     4      105   \n","3    3004     0    50     1       1        1       1      -9     4      145   \n","4    3005     0    57     1       1        1       1      -9     4      110   \n","..    ...   ...   ...   ...     ...      ...     ...     ...   ...      ...   \n","119  4071     0    56     1       1        1       1      -9     4      125   \n","120  4072     0    56     1       0        1       1      -9     3      125   \n","121  4073     0    54     1       1        1       1      -9     4      130   \n","122  4074     0    66     0       1        1       1      -9     4      155   \n","123        None  None  None    None     None    None    None  None     None   \n","\n","     ... rcaprox rcadist  lvx1  lvx2  lvx3  lvx4   lvf cathef  junk   num  \n","0    ...       1       1     1     1     1     1     1     75   -9.     1  \n","1    ...       1       1     1     1     1     5     1     63   -9.     1  \n","2    ...       2       1     1     1     1     1     1     67   -9.     1  \n","3    ...       1       1     1     1     1     5     4     36   -9.     1  \n","4    ...       2       1     1     1     1     1     1     60   -9.     3  \n","..   ...     ...     ...   ...   ...   ...   ...   ...    ...   ...   ...  \n","119  ...       2       1     5     1     1     1     2     68   -9.     3  \n","120  ...       1       1     1     1     5     3     2     61   -9.     2  \n","121  ...       2       1     1     1     1     1     1    -9.   -9.     3  \n","122  ...       2       1     1     1     1     1     1     70   -9.     1  \n","123  ...    None    None  None  None  None  None  None   None  None  None  \n","\n","[124 rows x 75 columns]>\n","          id  ccf  age  sex painloc painexer relrest pncaden   cp trestbps  \\\n","count    124  123  123  123     123      123     123     123  123      123   \n","unique   124    1   37    2       2        2       2       1    4       21   \n","top     3001    0   61    1       1        1       1      -9    4      115   \n","freq       1  123    9  113     112      101      96     123   98       14   \n","\n","        ... rcaprox rcadist lvx1 lvx2 lvx3 lvx4  lvf cathef junk  num  \n","count   ...     123     123  123  123  123  123  123    123  123  123  \n","unique  ...       2       2    5    5    6    7    6     38    1    5  \n","top     ...       1       1    1    1    1    1    1    -9.  -9.    1  \n","freq    ...      71      94  100  103  100   93   66     17  123   48  \n","\n","[4 rows x 75 columns]\n","\n","Data Frame 2:\n","<bound method DataFrame.info of        id   ccf   age   sex painloc painexer relrest pncaden    cp trestbps  \\\n","0    1254     0    40     1       1        0       0      -9     2      140   \n","1    1255     0    49     0       1        0       0      -9     3      160   \n","2    1256     0    37     1       1        0       0      -9     2      130   \n","3    1257     0    48     0       1        1       1      -9     4      138   \n","4    1258     0    54     1       1        0       1      -9     3      150   \n","..    ...   ...   ...   ...     ...      ...     ...     ...   ...      ...   \n","290  1054     0    36     1       1        0       0      -9     2      120   \n","291  5001     0    48     1       0        0       0      -9     3      110   \n","292  5000     0    47     0       0        0       0      -9     2      140   \n","293  5002     0    53     1       1        1       1      -9     4      130   \n","294        None  None  None    None     None    None    None  None     None   \n","\n","     ... rcaprox rcadist  lvx1  lvx2  lvx3  lvx4   lvf cathef  junk   num  \n","0    ...      -9      -9     1     1     1     1     1    -9.   -9.     0  \n","1    ...      -9      -9     1     1     1     1     1    -9.   -9.     1  \n","2    ...      -9      -9     1     1     1     1     1    -9.   -9.     0  \n","3    ...       2      -9     1     1     1     1     1    -9.   -9.     3  \n","4    ...       1      -9     1     1     1     1     1    -9.   -9.     0  \n","..   ...     ...     ...   ...   ...   ...   ...   ...    ...   ...   ...  \n","290  ...      -9      -9     1     1     1     1     1    -9.   -9.     0  \n","291  ...      -9      -9     1     1     1     1     1    -9.   -9.     0  \n","292  ...      -9      -9     1     1     1     1     1    -9.   -9.     0  \n","293  ...       1       1     1     1     1     1     1    -9.   -9.     0  \n","294  ...    None    None  None  None  None  None  None   None  None  None  \n","\n","[295 rows x 75 columns]>\n","          id  ccf  age  sex painloc painexer relrest pncaden   cp trestbps  \\\n","count    295  294  294  294     294      294     294     294  294      294   \n","unique   294    1   38    2       2        2       2       1    4       32   \n","top     1132    0   54    1       1        0       1      -9    4      120   \n","freq       2  294   25  213     271      164     153     294  123       65   \n","\n","        ... rcaprox rcadist lvx1 lvx2 lvx3 lvx4  lvf cathef junk  num  \n","count   ...     294     294  294  294  294  294  294    294  294  294  \n","unique  ...       3       3    1    2    4    7    4     21    2    5  \n","top     ...      -9      -9    1    1    1    1    1    -9.  -9.    0  \n","freq    ...     244     269  294  293  287  264  269    265  293  188  \n","\n","[4 rows x 75 columns]\n","\n","Data Frame 3:\n","<bound method DataFrame.info of       id   ccf   age   sex painloc painexer relrest pncaden    cp trestbps  \\\n","0      1     0    63     1       1        1       1      -9     4      140   \n","1      2     0    44     1       1        1       1      -9     4      130   \n","2      3     0    60     1       1        1       1      -9     4      132   \n","3      4     0    55     1       1        1       1      -9     4      142   \n","4      5     0    66     1       1        0       0      -9     3      110   \n","..   ...   ...   ...   ...     ...      ...     ...     ...   ...      ...   \n","196  201     0    62     1       0        0       0      -9     1       -9   \n","197  202     0    55     1       1        1       1      -9     4      122   \n","198  116     0    58     1       1        1       1      -9     4       -9   \n","199  160     0    62     1       1        0       0      -9     2      120   \n","200       None  None  None    None     None    None    None  None     None   \n","\n","     ... rcaprox rcadist  lvx1  lvx2  lvx3  lvx4   lvf cathef  junk   num  \n","0    ...       2       1     1     1     1     1     1    0.7   5.5     2  \n","1    ...       1       1     1     1     1     1     1    0.5   -9.     0  \n","2    ...       2       1     1     1     1     7     2   0.52   4.1     2  \n","3    ...       1       1     1     1     1     1     1   0.73   6.5     1  \n","4    ...       1       1     1     1     1     1     1   0.73     8     0  \n","..   ...     ...     ...   ...   ...   ...   ...   ...    ...   ...   ...  \n","196  ...       1       1     1     1     1     1     2   0.62   3.5     0  \n","197  ...       2       1     1     1     1     1     1   0.69   5.6     2  \n","198  ...       1       1     1     1     1     1     1   0.81     6     0  \n","199  ...       2       1     1     1     1     1     1     -9   -9.     1  \n","200  ...    None    None  None  None  None  None  None   None  None  None  \n","\n","[201 rows x 75 columns]>\n","         id  ccf  age  sex painloc painexer relrest pncaden   cp trestbps  \\\n","count   201  200  200  200     200      200     200     200  200      200   \n","unique  201    1   39    2       2        2       3       1    4       41   \n","top       1    0   63    1       1        1       1      -9    4       -9   \n","freq      1  200   15  194     185      135     163     200  131       56   \n","\n","        ... rcaprox rcadist lvx1 lvx2 lvx3 lvx4  lvf cathef junk  num  \n","count   ...     200     200  200  200  200  200  200    200  200  200  \n","unique  ...       3       3    2    5    5    8    7     49   53    5  \n","top     ...       1       1    1    1    1    1    1     -9  -9.    1  \n","freq    ...     116     178  198  193  184  155  175     23   81   56  \n","\n","[4 rows x 75 columns]\n","\n","Data Frame 4:\n","<bound method DataFrame.info of       id   ccf   age   sex painloc painexer relrest pncaden    cp trestbps  \\\n","0      1     0    63     1      -9       -9      -9      -9     1      145   \n","1      2     0    67     1      -9       -9      -9      -9     4      160   \n","2      3     0    67     1      -9       -9      -9      -9     4      120   \n","3      4     0    37     1      -9       -9      -9      -9     3      130   \n","4      6     0    41     0      -9       -9      -9      -9     2      130   \n","..   ...   ...   ...   ...     ...      ...     ...     ...   ...      ...   \n","278  295     0    57     1      -9       -9      -9      -9     2      154   \n","279  296     0    58     0      -9       -9      -9      -9     4      130   \n","280  297     0    57     1      -9       -9      -9      -9     4      110   \n","281  298     0    47     1      -9       -9      -9      -9     3      130   \n","282       None  None  None    None     None    None    None  None     None   \n","\n","     ... rcaprox rcadist  lvx1  lvx2  lvx3  lvx4   lvf cathef  junk   num  \n","0    ...       1       1     1     1     1     1     1     -9    -9     0  \n","1    ...       1       1     1     1     1     1     1     -9    -9     2  \n","2    ...       2       2     1     1     1     7     3     -9    -9     1  \n","3    ...       1       1     1     1     1     1     1     -9    -9     0  \n","4    ...       1       1     1     1     1     1     1     -9    -9     0  \n","..   ...     ...     ...   ...   ...   ...   ...   ...    ...   ...   ...  \n","278  ...       1       1     1     1     1     1     1     -9    -9     1  \n","279  ...       1       1     1     1     1     1     1     -9    -9     0  \n","280  ...       1       2     1     1     1     1     1     -9    -9     2  \n","281  ...       1       1     1     1     1     1     1     -9    -9     0  \n","282  ...    None    None  None  None  None  None  None   None  None  None  \n","\n","[283 rows x 75 columns]>\n","         id  ccf  age  sex painloc painexer relrest pncaden   cp trestbps  \\\n","count   283  282  282  282     282      282     282     282  282      282   \n","unique  283    1   41    2       1        1       1       1    4       48   \n","top       1    0   58    1      -9       -9      -9      -9    4      120   \n","freq      1  282   16  191     282      282     282     282  133       34   \n","\n","        ... rcaprox rcadist lvx1 lvx2 lvx3 lvx4  lvf cathef junk  num  \n","count   ...     282     282  282  282  282  282  282    282  282  282  \n","unique  ...       2       2    1    1    7    7    4      1    1    5  \n","top     ...       1       1    1    1    1    1    1     -9   -9    0  \n","freq    ...     233     246  282  282  272  257  249    282  282  157  \n","\n","[4 rows x 75 columns]\n"]}]},{"cell_type":"markdown","source":["# Cleaning the dataset:"],"metadata":{"id":"Y0zhUIaRuT1V"}},{"cell_type":"code","source":["# Check the count of existing null value fields and disply those columns:\n","\n","print(\"\\nDataFrame 1:\")\n","print(dataFrame_1[dataFrame_1.isnull().any(axis=1)])\n","\n","print(\"\\nDataFrame 2:\")\n","print(dataFrame_2[dataFrame_2.isnull().any(axis=1)])\n","\n","print(\"\\nDataFrame 3:\")\n","print(dataFrame_3[dataFrame_3.isnull().any(axis=1)])\n","\n","print(\"\\nDataFrame 4:\")\n","print(dataFrame_4[dataFrame_4.isnull().any(axis=1)])"],"metadata":{"id":"2T20yNDCuR5g","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684849044933,"user_tz":-600,"elapsed":301,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"f2950e7f-d0d2-4056-f7e9-6ce64c20c07d"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","DataFrame 1:\n","    id   ccf   age   sex painloc painexer relrest pncaden    cp trestbps  ...  \\\n","123     None  None  None    None     None    None    None  None     None  ...   \n","\n","    rcaprox rcadist  lvx1  lvx2  lvx3  lvx4   lvf cathef  junk   num  \n","123    None    None  None  None  None  None  None   None  None  None  \n","\n","[1 rows x 75 columns]\n","\n","DataFrame 2:\n","    id   ccf   age   sex painloc painexer relrest pncaden    cp trestbps  ...  \\\n","294     None  None  None    None     None    None    None  None     None  ...   \n","\n","    rcaprox rcadist  lvx1  lvx2  lvx3  lvx4   lvf cathef  junk   num  \n","294    None    None  None  None  None  None  None   None  None  None  \n","\n","[1 rows x 75 columns]\n","\n","DataFrame 3:\n","    id   ccf   age   sex painloc painexer relrest pncaden    cp trestbps  ...  \\\n","200     None  None  None    None     None    None    None  None     None  ...   \n","\n","    rcaprox rcadist  lvx1  lvx2  lvx3  lvx4   lvf cathef  junk   num  \n","200    None    None  None  None  None  None  None   None  None  None  \n","\n","[1 rows x 75 columns]\n","\n","DataFrame 4:\n","    id   ccf   age   sex painloc painexer relrest pncaden    cp trestbps  ...  \\\n","282     None  None  None    None     None    None    None  None     None  ...   \n","\n","    rcaprox rcadist  lvx1  lvx2  lvx3  lvx4   lvf cathef  junk   num  \n","282    None    None  None  None  None  None  None   None  None  None  \n","\n","[1 rows x 75 columns]\n"]}]},{"cell_type":"code","source":["# Drop any rows containing null values:\n","\n","dataFrame_1.dropna(how=\"any\", inplace=True)\n","dataFrame_2.dropna(how=\"any\", inplace=True)\n","dataFrame_3.dropna(how=\"any\", inplace=True)\n","dataFrame_4.dropna(how=\"any\", inplace=True)"],"metadata":{"id":"JPtlvZ0ET3oj","executionInfo":{"status":"ok","timestamp":1684849048546,"user_tz":-600,"elapsed":583,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# Check any columns still containing null after cleaning:\n","\n","print(\"\\nDataFrame 1:\")\n","print(dataFrame_1[dataFrame_1.isnull().any(axis=1)])\n","\n","print(\"\\nDataFrame 2:\")\n","print(dataFrame_2[dataFrame_2.isnull().any(axis=1)])\n","\n","print(\"\\nDataFrame 3:\")\n","print(dataFrame_3[dataFrame_3.isnull().any(axis=1)])\n","\n","print(\"\\nDataFrame 4:\")\n","print(dataFrame_4[dataFrame_4.isnull().any(axis=1)])"],"metadata":{"id":"X51RhRgQSY6Q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684849049761,"user_tz":-600,"elapsed":7,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"b5628aa8-76fc-4c40-ba55-7f1b2de4494e"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","DataFrame 1:\n","Empty DataFrame\n","Columns: [id, ccf, age, sex, painloc, painexer, relrest, pncaden, cp, trestbps, htn, chol, smoke, cigs, years, fbs, dm, famhist, restecg, ekgmo, ekgday, ekgyr, dig, prop, nitr, pro, diuretic, proto, thaldur, thaltime, met, thalach, thalrest, tpeakbps, tpeakbpd, dummy, trestbpd, exang, xhypo, oldpeak, slope, rldv5, rldv5e, ca, restckm, exerckm, restef, restwm, exeref, exerwm, thal, thalsev, thalpul, earlobe, cmo, cday, cyr, lmt, ladprox, laddist, diag, cxmain, ramus, om1, om2, rcaprox, rcadist, lvx1, lvx2, lvx3, lvx4, lvf, cathef, junk, num]\n","Index: []\n","\n","[0 rows x 75 columns]\n","\n","DataFrame 2:\n","Empty DataFrame\n","Columns: [id, ccf, age, sex, painloc, painexer, relrest, pncaden, cp, trestbps, htn, chol, smoke, cigs, years, fbs, dm, famhist, restecg, ekgmo, ekgday, ekgyr, dig, prop, nitr, pro, diuretic, proto, thaldur, thaltime, met, thalach, thalrest, tpeakbps, tpeakbpd, dummy, trestbpd, exang, xhypo, oldpeak, slope, rldv5, rldv5e, ca, restckm, exerckm, restef, restwm, exeref, exerwm, thal, thalsev, thalpul, earlobe, cmo, cday, cyr, lmt, ladprox, laddist, diag, cxmain, ramus, om1, om2, rcaprox, rcadist, lvx1, lvx2, lvx3, lvx4, lvf, cathef, junk, num]\n","Index: []\n","\n","[0 rows x 75 columns]\n","\n","DataFrame 3:\n","Empty DataFrame\n","Columns: [id, ccf, age, sex, painloc, painexer, relrest, pncaden, cp, trestbps, htn, chol, smoke, cigs, years, fbs, dm, famhist, restecg, ekgmo, ekgday, ekgyr, dig, prop, nitr, pro, diuretic, proto, thaldur, thaltime, met, thalach, thalrest, tpeakbps, tpeakbpd, dummy, trestbpd, exang, xhypo, oldpeak, slope, rldv5, rldv5e, ca, restckm, exerckm, restef, restwm, exeref, exerwm, thal, thalsev, thalpul, earlobe, cmo, cday, cyr, lmt, ladprox, laddist, diag, cxmain, ramus, om1, om2, rcaprox, rcadist, lvx1, lvx2, lvx3, lvx4, lvf, cathef, junk, num]\n","Index: []\n","\n","[0 rows x 75 columns]\n","\n","DataFrame 4:\n","Empty DataFrame\n","Columns: [id, ccf, age, sex, painloc, painexer, relrest, pncaden, cp, trestbps, htn, chol, smoke, cigs, years, fbs, dm, famhist, restecg, ekgmo, ekgday, ekgyr, dig, prop, nitr, pro, diuretic, proto, thaldur, thaltime, met, thalach, thalrest, tpeakbps, tpeakbpd, dummy, trestbpd, exang, xhypo, oldpeak, slope, rldv5, rldv5e, ca, restckm, exerckm, restef, restwm, exeref, exerwm, thal, thalsev, thalpul, earlobe, cmo, cday, cyr, lmt, ladprox, laddist, diag, cxmain, ramus, om1, om2, rcaprox, rcadist, lvx1, lvx2, lvx3, lvx4, lvf, cathef, junk, num]\n","Index: []\n","\n","[0 rows x 75 columns]\n"]}]},{"cell_type":"code","source":["# This function replaces dummy values or error values with appropriate values that can actually be used by the regression models going forward.\n","# For example, we are replacing the '-9's in the dataFrames with an appropriate '0' value in the columns for cigarettes and years smoked.\n","\n","def replaceValues(dataFrame):\n","  dataFrame[\"dm\"] = dataFrame[\"dm\"].replace(\"-9\", \"0\")\n","  dataFrame[\"cigs\"] = dataFrame[\"cigs\"].replace(\"-9\", \"0\")\n","  dataFrame[\"years\"] = dataFrame[\"years\"].replace(\"-9\", \"0\")\n","\n","  dataFrame[\"ca\"] = dataFrame[\"ca\"].replace(\"-9\", \"0\")\n","  dataFrame[\"thal\"] = dataFrame[\"thal\"].replace(\"-9\", \"3\")\n","\n","  dataFrame[\"nitr\"] = dataFrame[\"nitr\"].replace(\"-9\", \"0\")\n","  dataFrame[\"prop\"] = dataFrame[\"prop\"].replace(\"-9\", \"0\")\n","  dataFrame[\"pro\"] = dataFrame[\"pro\"].replace(\"-9\", \"0\")\n","  dataFrame[\"diuretic\"] = dataFrame[\"diuretic\"].replace(\"-9\", \"0\")\n","  dataFrame[\"restecg\"] = dataFrame[\"restecg\"].replace(\"-9\", \"0\")\n","\n","  dataFrame[\"trestbps\"] = dataFrame[\"trestbps\"].replace(\"-9\", \"0\")\n","  dataFrame[\"chol\"] = dataFrame[\"chol\"].replace(\"-9\", \"0\")\n","  dataFrame[\"fbs\"] = dataFrame[\"fbs\"].replace(\"-9\", \"0\")\n","  dataFrame[\"famhist\"] = dataFrame[\"famhist\"].replace(\"-9\", \"0\")\n","  dataFrame[\"thalach\"] = dataFrame[\"thalach\"].replace(\"-9\", \"0\")\n","  dataFrame[\"thalrest\"] = dataFrame[\"thalrest\"].replace(\"-9\", \"0\")\n","\n","  dataFrame[\"tpeakbps\"] = dataFrame[\"tpeakbps\"].replace(\"-9\", \"0\")\n","  dataFrame[\"tpeakbpd\"] = dataFrame[\"tpeakbpd\"].replace(\"-9\", \"0\")\n","  dataFrame[\"trestbpd\"] = dataFrame[\"trestbpd\"].replace(\"-9\", \"0\")\n","\n","  dataFrame[\"exang\"] = dataFrame[\"exang\"].replace(\"-9\", \"0\")\n","  dataFrame[\"oldpeak\"] = dataFrame[\"oldpeak\"].replace(\"-9\", \"0\")\n","  dataFrame[\"slope\"] = dataFrame[\"slope\"].replace(\"-9\", \"0\")\n","\n","  #dataFrame[\"num\"] = dataFrame[\"num\"].replace([\"1\", \"2\", \"3\", \"4\"], \"1\")\n","\n","  #dataFrame[['num','sex','cp','ca']] = dataFrame[['num','sex','cp','ca']].astype(\"category\")\n","  #dataFrame[['age','thalach']]=dataFrame[['age','thalach']].apply(pandas.to_numeric)\n","\n","  for col in dataFrame.columns:\n","    dataFrame[col] = numpy.float64(dataFrame[col])\n","\n","  return dataFrame"],"metadata":{"id":"v6fGZcWbiXRd","executionInfo":{"status":"ok","timestamp":1684849053593,"user_tz":-600,"elapsed":6,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["dataFrame_1 = replaceValues(dataFrame_1)\n","dataFrame_2 = replaceValues(dataFrame_2)\n","dataFrame_3 = replaceValues(dataFrame_3)\n","dataFrame_4 = replaceValues(dataFrame_4)"],"metadata":{"id":"ZZqIUUMYis-n","executionInfo":{"status":"ok","timestamp":1684849056097,"user_tz":-600,"elapsed":406,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["dataFrame = pandas.concat([dataFrame_1, dataFrame_2, dataFrame_3, dataFrame_4])\n","dataFrame_smaller = dataFrame[tuning_columns]\n","dataFrame_bigger = dataFrame[important_columns]\n","dataFrame.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cytEuzy1w6wT","executionInfo":{"status":"ok","timestamp":1684849057460,"user_tz":-600,"elapsed":7,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"b4188646-58ec-4d39-c4d1-341cd018aaa2"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(899, 75)"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["# Descriptive Statistics and Exploration:"],"metadata":{"id":"sauzANiCu1cy"}},{"cell_type":"code","source":["pandas_profiling.ProfileReport(dataFrame_1[reccomended_columns])"],"metadata":{"id":"OznCCR0_UnI9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pandas_profiling.ProfileReport(dataFrame_2[reccomended_columns])"],"metadata":{"id":"0ClhpZBtW3Oi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pandas_profiling.ProfileReport(dataFrame_3[reccomended_columns])"],"metadata":{"id":"6dOLUGt_W4nD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pandas_profiling.ProfileReport(dataFrame_4[reccomended_columns])"],"metadata":{"id":"AGcxinfxW5y0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Visualisation of the attributes in the dataset using the plotnine package:"],"metadata":{"id":"PYQSlfx39ATO"}},{"cell_type":"code","source":["# Distribution Graph of age by Heart Disease\n","(\n","  ggplot(dataFrame_4)\n","  +aes(x=\"age\", fill=(\"num\")) +\n","  geom_density(alpha = 0.8)+\n","  ggtitle(\"Age by Heart Disease\") +\n","  xlab(\"Age\")+\n","  scale_fill_discrete(name = \"Heart Disease\", labels = [\"Yes\", \"No\"])\n",")"],"metadata":{"id":"LSb91YnS8odk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Distribution Graph of Age by Sex\n","(\n","  ggplot(dataFrame_4)\n","  +aes(x=\"age\", fill=(\"sex\")) +\n","  geom_density(alpha = 0.8)+\n","  ggtitle(\"Age by Sex\") +\n","  xlab(\"Age\")+\n","  scale_fill_discrete(name = \"Sex\", labels = [\"Male\", \"Female\"])\n",")"],"metadata":{"id":"JZmThKwJ9wxA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Distribution Graph of Max Heart Rate by Heart Disease\n","(\n","  ggplot(dataFrame_4)\n","  +aes(x=\"thalach\", fill=(\"num\")) +\n","  geom_density(alpha = 0.8)+\n","  ggtitle(\"Max Heart Rate by Heart Disease\") +\n","  xlab(\"Max Heart Rate\")+\n","  scale_fill_discrete(name = \"Heart Disease\", labels = [\"Yes\", \"No\"])\n",")"],"metadata":{"id":"GAzBZSwt-GKo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Distribution Graph of Max Heart Rate by Sex\n","(\n","  ggplot(dataFrame_4)\n","  +aes(x=\"thalach\", fill=(\"sex\")) +\n","  geom_density(alpha = 0.8)+\n","  ggtitle(\"Max Heart Rate by Sex\") +\n","  xlab(\"Max Heart Rate\")+\n","  scale_fill_discrete(name = \"Sex\", labels = [\"Male\", \"Female\"])\n",")"],"metadata":{"id":"Rhhvr9dn-GKp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Bar Chart of Heart Disease Condition segmented by Chest Pain Type\n","(\n","  ggplot(dataFrame_4)\n","  +aes( x=\"num\", fill=(\"cp\")) +\n","  geom_bar()\n","  +ggtitle(\"Chest Pain Type by Heart Disease\") \n","  +scale_fill_discrete(name=\"Chest Pain Type\",labels=[\"Value 1: typical angina\", \"Value 2: atypical angina\", \"Value 3: non-anginal pain\", \"Value 4: asymptomatic\"])\n","  +xlab(\"Heart Disease Condition\") +\n","  ylab(\"Count\") \n",")"],"metadata":{"id":"z0vU6Pe5t77J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Bar Chart of Heart Disease Condition Segmented by Number of Major Vessels\n","(\n","  ggplot(dataFrame_4)\n","  +aes( x=\"num\", fill=(\"ca\")) +\n","  geom_bar()\n","  +ggtitle(\"Number of Major Vessels by Heart Disease\") \n","  +scale_fill_discrete(name=\"Number of major vessels\")\n","  +xlab(\"Heart Disease Condition\") +\n","  ylab(\"Count\") \n",")"],"metadata":{"id":"0QTH1Bd3x-qE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pandas_profiling.ProfileReport(dataFrame)"],"metadata":{"id":"o6Cd-HssYKbo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Classification:"],"metadata":{"id":"9Ct9zAXPiwBv"}},{"cell_type":"markdown","source":["### Logistic Regression."],"metadata":{"id":"OZUQ7M1ikXrZ"}},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.12, random_state=42)"],"metadata":{"id":"Sa33pe3sivxW","executionInfo":{"status":"ok","timestamp":1684849067206,"user_tz":-600,"elapsed":294,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["logisticRegression = LogisticRegression(solver=\"newton-cholesky\", class_weight=\"balanced\")\n","logisticRegression.fit(X_train, y_train)\n","y_train_preds = logisticRegression.predict(X_train)\n","y_test_preds = logisticRegression.predict(X_test) \n","\n","print(\"\\nTraining Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_train, y_train_preds))\n","print(\"F1 Score : \", f1_score(y_train, y_train_preds, average='weighted'))\n","\n","print(\"\\nTesting Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_test, y_test_preds))\n","print(\"F1 Score : \", f1_score(y_test, y_test_preds, average='weighted'))\n","\n","print(\"\\nConfusion Matrix for Training :\\n\", confusion_matrix(y_train, y_train_preds, labels=logisticRegression.classes_))\n","print(\"\\nConfusion Matrix for Testing :\\n\", confusion_matrix(y_test, y_test_preds, labels=logisticRegression.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wrSJ4wqgi6zV","executionInfo":{"status":"ok","timestamp":1684849068722,"user_tz":-600,"elapsed":6,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"58b32551-014e-4ce3-aa70-6ae11821081e"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Training Data :\n","Accuracy Score :  0.8166877370417194\n","F1 Score :  0.8168683760248248\n","\n","Testing Data :\n","Accuracy Score :  0.8611111111111112\n","F1 Score :  0.8615081771540232\n","\n","Confusion Matrix for Training :\n"," [[289  68]\n"," [ 77 357]]\n","\n","Confusion Matrix for Testing :\n"," [[41  6]\n"," [ 9 52]]\n"]}]},{"cell_type":"code","source":["cross_val_score(logisticRegression, X_train, y_train, cv=10, scoring='accuracy')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xoOuCvcNw_0a","executionInfo":{"status":"ok","timestamp":1684849074863,"user_tz":-600,"elapsed":1259,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"59310ca7-a2c2-4925-db00-77e60a6af6ab"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.825     , 0.84810127, 0.73417722, 0.78481013, 0.81012658,\n","       0.75949367, 0.83544304, 0.78481013, 0.83544304, 0.74683544])"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["### Support Vector Classifier."],"metadata":{"id":"l-3VuVoNkdGO"}},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.12, random_state=42)"],"metadata":{"id":"Gu8sL_oTkhI3","executionInfo":{"status":"ok","timestamp":1684849075710,"user_tz":-600,"elapsed":6,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["svc = SVC(class_weight=\"balanced\",\n","          kernel=\"linear\",\n","          C=1.0,\n","          gamma=0.001)\n","svc.fit(X_train, y_train)\n","\n","y_train_preds = svc.predict(X_train)\n","y_test_preds = svc.predict(X_test)\n","\n","print(\"\\n Training Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_train, y_train_preds))\n","print(\"F1 Score : \", f1_score(y_train, y_train_preds, average='weighted'))\n","\n","print(\"\\n Testing Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_test, y_test_preds))\n","print(\"F1 Score : \", f1_score(y_test, y_test_preds, average='weighted'))\n","\n","print(\"\\nConfusion Matrix for Training :\\n\", confusion_matrix(y_train, y_train_preds, labels=svc.classes_))\n","print(\"\\nConfusion Matrix for Testing :\\n\", confusion_matrix(y_test, y_test_preds, labels=svc.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zP_e_g7skuDp","executionInfo":{"status":"ok","timestamp":1684849092944,"user_tz":-600,"elapsed":16953,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"8e703b09-dea7-4a5a-c064-8f19eb45b748"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Training Data :\n","Accuracy Score :  0.8192161820480405\n","F1 Score :  0.8192383460411756\n","\n"," Testing Data :\n","Accuracy Score :  0.8796296296296297\n","F1 Score :  0.8797657596700659\n","\n","Confusion Matrix for Training :\n"," [[286  71]\n"," [ 72 362]]\n","\n","Confusion Matrix for Testing :\n"," [[41  6]\n"," [ 7 54]]\n"]}]},{"cell_type":"code","source":["cross_val_score(svc, X_train, y_train, cv=10, scoring='accuracy')"],"metadata":{"id":"-43NcKL0xcaI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684849218690,"user_tz":-600,"elapsed":125763,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"2d45cc62-093f-43f6-b3a6-183d671f86c2"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.825     , 0.88607595, 0.73417722, 0.78481013, 0.83544304,\n","       0.7721519 , 0.82278481, 0.79746835, 0.82278481, 0.72151899])"]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","source":["### Decision Tree."],"metadata":{"id":"0EaE5VqYl4kR"}},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.12, random_state=42)"],"metadata":{"id":"GVVu-7cxl_S2","executionInfo":{"status":"ok","timestamp":1684849218690,"user_tz":-600,"elapsed":14,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["tree = DecisionTreeClassifier(class_weight=\"balanced\",\n","                              max_depth=4,\n","                              min_samples_leaf=20\n","                              )\n","tree.fit(X_train, y_train)\n","\n","y_train_preds = tree.predict(X_train)\n","y_test_preds = tree.predict(X_test)\n","\n","print(\"\\n Training Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_train, y_train_preds))\n","print(\"F1 Score : \", f1_score(y_train, y_train_preds, average='weighted'))\n","\n","print(\"\\n Testing Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_test, y_test_preds))\n","print(\"F1 Score : \", f1_score(y_test, y_test_preds, average='weighted'))\n","\n","print(\"\\nConfusion Matrix for Training :\\n\", confusion_matrix(y_train, y_train_preds, labels=tree.classes_))\n","print(\"\\nConfusion Matrix for Testing :\\n\", confusion_matrix(y_test, y_test_preds, labels=tree.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8ti_Gg15l664","executionInfo":{"status":"ok","timestamp":1684849218691,"user_tz":-600,"elapsed":14,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"dd4f5775-b9ed-4962-9b8a-6e981bbbef93"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Training Data :\n","Accuracy Score :  0.7989886219974716\n","F1 Score :  0.7993895053667668\n","\n"," Testing Data :\n","Accuracy Score :  0.8240740740740741\n","F1 Score :  0.8248162497409162\n","\n","Confusion Matrix for Training :\n"," [[289  68]\n"," [ 91 343]]\n","\n","Confusion Matrix for Testing :\n"," [[41  6]\n"," [13 48]]\n"]}]},{"cell_type":"code","source":["cross_val_score(tree, X_train, y_train, cv=10, scoring='accuracy')"],"metadata":{"id":"_zM3kVjRv3M2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684849218691,"user_tz":-600,"elapsed":13,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"4354a939-9d3f-4e73-9f81-b33857539c0b"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.7375    , 0.7721519 , 0.74683544, 0.74683544, 0.67088608,\n","       0.73417722, 0.74683544, 0.75949367, 0.78481013, 0.72151899])"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","source":["### Random Forest Algorithm"],"metadata":{"id":"cttcB_lwnW4P"}},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.12, random_state=42)"],"metadata":{"id":"me6HrmL8ncTc","executionInfo":{"status":"ok","timestamp":1684849218691,"user_tz":-600,"elapsed":11,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["estimator = RandomForestClassifier(class_weight=\"balanced\",\n","                                   n_estimators=50,\n","                                   max_depth=8,\n","                                   min_samples_split=100\n","                                   )\n","estimator.fit(X_train, y_train)\n","\n","y_train_preds = estimator.predict(X_train)\n","y_test_preds = estimator.predict(X_test)\n","\n","print(\"\\nTraining Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_train, y_train_preds))\n","print(\"F1 Score : \", f1_score(y_train, y_train_preds, average='weighted'))\n","\n","print(\"\\nTesting Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_test, y_test_preds))\n","print(\"F1 Score : \", f1_score(y_test, y_test_preds, average='weighted'))\n","\n","print(\"\\nConfusion Matrix for Training :\\n\", confusion_matrix(y_train, y_train_preds, labels=estimator.classes_))\n","print(\"\\nConfusion Matrix for Testing :\\n\", confusion_matrix(y_test, y_test_preds, labels=estimator.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KfvQBYtaneib","executionInfo":{"status":"ok","timestamp":1684849218691,"user_tz":-600,"elapsed":11,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"52ebf29d-5ec6-498b-8c5a-20ba87363cdd"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Training Data :\n","Accuracy Score :  0.820480404551201\n","F1 Score :  0.8205649045155295\n","\n","Testing Data :\n","Accuracy Score :  0.8333333333333334\n","F1 Score :  0.8339098351204888\n","\n","Confusion Matrix for Training :\n"," [[288  69]\n"," [ 73 361]]\n","\n","Confusion Matrix for Testing :\n"," [[40  7]\n"," [11 50]]\n"]}]},{"cell_type":"code","source":["feature_importance = pandas.DataFrame(\n","    {\n","        'feature' : X_train.columns,\n","        'importance' : estimator.feature_importances_\n","    }\n",").sort_values('importance', ascending=False)\n","print(feature_importance)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xlyjwAjUCPgq","executionInfo":{"status":"ok","timestamp":1684849218691,"user_tz":-600,"elapsed":9,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"c36ff27a-a4ee-4fc3-e477-565dce29f987"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["     feature  importance\n","2         cp    0.301208\n","16     exang    0.150917\n","11   thalach    0.107578\n","18     slope    0.091337\n","17   oldpeak    0.068994\n","4       chol    0.067051\n","1        sex    0.053445\n","0        age    0.044724\n","19      thal    0.038175\n","12  thalrest    0.017788\n","8       nitr    0.015944\n","9        pro    0.007739\n","13  tpeakbps    0.006941\n","3   trestbps    0.006692\n","7       prop    0.006124\n","14  tpeakbpd    0.004953\n","5        fbs    0.003931\n","15  trestbpd    0.003061\n","6    restecg    0.002825\n","10  diuretic    0.000574\n"]}]},{"cell_type":"code","source":["cross_val_score(estimator, X_train, y_train, cv=10, scoring='accuracy')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wvxfdn_xoMfF","executionInfo":{"status":"ok","timestamp":1684849220692,"user_tz":-600,"elapsed":2009,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"0963d264-98be-48b7-edec-1397354708bc"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.75      , 0.82278481, 0.74683544, 0.84810127, 0.83544304,\n","       0.75949367, 0.83544304, 0.78481013, 0.84810127, 0.79746835])"]},"metadata":{},"execution_count":27}]},{"cell_type":"markdown","source":["### Extra Random Tree"],"metadata":{"id":"o9MysNVsKc1N"}},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.12, random_state=42)"],"metadata":{"id":"mdmdvL3RLZa2","executionInfo":{"status":"ok","timestamp":1684849220692,"user_tz":-600,"elapsed":9,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["random_ranges = {\n","    'n_estimators': randint(50, 250),\n","    'min_samples_split': randint(150, 250),\n","    'max_leaf_nodes': randint(4, 64),\n","    'max_depth': randint(1,16)\n","}\n","\n","classifier = ExtraTreesClassifier(random_state=8, max_features=\"log2\", class_weight=\"balanced\")\n","\n","randomSearcher = RandomizedSearchCV(classifier, random_ranges, random_state=8, scoring='neg_root_mean_squared_error', cv=10, verbose=1)\n","randomSearcher.fit(X_train, y_train)\n","\n","print(randomSearcher.best_params_)\n","\n","estimator = randomSearcher.best_estimator_\n","\n","y_train_preds = estimator.predict(X_train)\n","y_test_preds = estimator.predict(X_test)\n","\n","print(\"\\nTraining Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_train, y_train_preds))\n","print(\"F1 Score : \", f1_score(y_train, y_train_preds, average='weighted'))\n","\n","print(\"\\nTesting Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_test, y_test_preds))\n","print(\"F1 Score : \", f1_score(y_test, y_test_preds, average='weighted'))\n","\n","print(\"\\nConfusion Matrix for Training :\\n\", confusion_matrix(y_train, y_train_preds, labels=estimator.classes_))\n","print(\"\\nConfusion Matrix for Testing :\\n\", confusion_matrix(y_test, y_test_preds, labels=estimator.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YvN4YKS_KfoM","executionInfo":{"status":"ok","timestamp":1684849248363,"user_tz":-600,"elapsed":27679,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"b0aebb2e-772d-4108-fc1b-f6fbf62257e7"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 10 folds for each of 10 candidates, totalling 100 fits\n","{'max_depth': 10, 'max_leaf_nodes': 55, 'min_samples_split': 218, 'n_estimators': 231}\n","\n","Training Data :\n","Accuracy Score :  0.797724399494311\n","F1 Score :  0.7979042231937877\n","\n","Testing Data :\n","Accuracy Score :  0.8240740740740741\n","F1 Score :  0.8247575469797691\n","\n","Confusion Matrix for Training :\n"," [[281  76]\n"," [ 84 350]]\n","\n","Confusion Matrix for Testing :\n"," [[40  7]\n"," [12 49]]\n"]}]},{"cell_type":"markdown","source":["# Neural Networks:"],"metadata":{"id":"N2uND5u8r_RV"}},{"cell_type":"markdown","source":["### Classification"],"metadata":{"id":"90hscUkJsDfq"}},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.12, random_state=42)"],"metadata":{"id":"G67PeeKntiVN","executionInfo":{"status":"ok","timestamp":1684849248364,"user_tz":-600,"elapsed":8,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["hidden_layers = [512]\n","hidden_activation = 'relu'\n","solver_algo = 'lbfgs'\n","lr_init = 0.0025\n","lr = 'adaptive'\n","batch_size = 32\n","epochs = 200"],"metadata":{"id":"5KAB6y4FsF4g","executionInfo":{"status":"ok","timestamp":1684849248364,"user_tz":-600,"elapsed":8,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["neuralNetwork = MLPClassifier(\n","    hidden_layer_sizes=hidden_layers, \n","    batch_size=batch_size, \n","    activation=hidden_activation, \n","    solver=solver_algo, \n","    learning_rate_init=lr_init, \n","    learning_rate = lr,\n","    max_iter=epochs,\n","    random_state=1\n",").fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AWytIoXcsZWG","executionInfo":{"status":"ok","timestamp":1684849254558,"user_tz":-600,"elapsed":6201,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"8cb564a2-d238-49fe-ec66-8ce1caedc39d"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:541: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n"]}]},{"cell_type":"code","source":["y_train_preds = neuralNetwork.predict(X_train)\n","y_test_preds = neuralNetwork.predict(X_test)\n","\n","print(\"\\nTraining Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_train, y_train_preds))\n","print(\"F1 Score : \", f1_score(y_train, y_train_preds, average='weighted'))\n","\n","print(\"\\nTesting Data :\")\n","print(\"Accuracy Score : \", accuracy_score(y_test, y_test_preds))\n","print(\"F1 Score : \", f1_score(y_test, y_test_preds, average='weighted'))\n","\n","print(\"\\nConfusion Matrix for Training :\\n\", confusion_matrix(y_train, y_train_preds, labels=neuralNetwork.classes_))\n","print(\"\\nConfusion Matrix for Testing :\\n\", confusion_matrix(y_test, y_test_preds, labels=neuralNetwork.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TMcGZt1sszKs","executionInfo":{"status":"ok","timestamp":1684849254559,"user_tz":-600,"elapsed":22,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"04e51951-02fd-4a84-8f4c-b77a189c6f69"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Training Data :\n","Accuracy Score :  0.8394437420986094\n","F1 Score :  0.8389686873681508\n","\n","Testing Data :\n","Accuracy Score :  0.8333333333333334\n","F1 Score :  0.8328658251519402\n","\n","Confusion Matrix for Training :\n"," [[284  73]\n"," [ 54 380]]\n","\n","Confusion Matrix for Testing :\n"," [[37 10]\n"," [ 8 53]]\n"]}]},{"cell_type":"code","source":["# ROC Plot\n","from sklearn.metrics import roc_curve, roc_auc_score\n","\n","# Calculate the probabilities for the positive class\n","y_train_probs = neuralNetwork.predict_proba(X_train)[:, 1]\n","y_test_probs = neuralNetwork.predict_proba(X_test)[:, 1]\n","\n","# Calculate the false positive rate and true positive rate for the training data\n","fpr_train, tpr_train, _ = roc_curve(y_train, y_train_probs)\n","auc_train = roc_auc_score(y_train, y_train_probs)\n","\n","# Calculate the false positive rate and true positive rate for the test data\n","fpr_test, tpr_test, _ = roc_curve(y_test, y_test_probs)\n","auc_test = roc_auc_score(y_test, y_test_probs)\n","\n","# Plot the ROC curve for training and test data\n","plt.plot(fpr_train, tpr_train, label=f\"Train ROC Curve (AUC = {auc_train:.2f})\")\n","plt.plot(fpr_test, tpr_test, label=f\"Test ROC Curve (AUC = {auc_test:.2f})\")\n","plt.plot([0, 1], [0, 1], 'k--')  # Diagonal line for random classifier\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic (ROC) Curve')\n","plt.legend(loc='lower right')\n","plt.show()"],"metadata":{"id":"3n_TBu-hy6Jj","colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1684849429635,"user_tz":-600,"elapsed":12,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"a75e7145-4957-4aaa-cd77-5b5b617db67d"},"execution_count":38,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":[],"metadata":{"id":"kH60fG8nzBRO"}},{"cell_type":"code","source":["#Neural Network Architecture:\n","import matplotlib.pyplot as plt\n","\n","layer_sizes = neuralNetwork.hidden_layer_sizes\n","layer_sizes = [X_train.shape[1]] + list(layer_sizes) + [2]  # Include input and output layer sizes\n","\n","plt.figure(figsize=(10, 5))\n","plt.title(\"Neural Network Architecture\")\n","plt.xlabel(\"Layers\")\n","plt.ylabel(\"Number of Neurons\")\n","\n","plt.bar(range(len(layer_sizes)), layer_sizes)\n","plt.show()"],"metadata":{"id":"eRWH6YY9zG_a","colab":{"base_uri":"https://localhost:8080/","height":487},"executionInfo":{"status":"ok","timestamp":1684849450393,"user_tz":-600,"elapsed":659,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"82baeb39-5444-4b92-8d59-efdd693a18a7"},"execution_count":39,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Statistical Analysis\n","import numpy as np\n","weights = neuralNetwork.coefs_\n","layer_stats = []\n","for i, layer_weights in enumerate(weights):\n","    neuron_stats = []\n","    print(f\"Layer {i+1}:\")\n","    for j, neuron_weights in enumerate(layer_weights.T):\n","        mean_weight = np.mean(neuron_weights)\n","        std_weight = np.std(neuron_weights)\n","        min_weight = np.min(neuron_weights)\n","        max_weight = np.max(neuron_weights)\n","        neuron_stats.append((mean_weight, std_weight, min_weight, max_weight))\n","        print(f\"Neuron {j+1}: Mean={mean_weight:.2f}, Std={std_weight:.2f}, Min={min_weight:.2f}, Max={max_weight:.2f}\")\n","    layer_stats.append(neuron_stats)"],"metadata":{"id":"2tZlLiTQzNOL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684849827005,"user_tz":-600,"elapsed":12,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"05c2e267-0f12-4d56-e416-556f54f56cac"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Layer 1:\n","Neuron 1: Mean=-0.00, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 2: Mean=-0.01, Std=0.07, Min=-0.14, Max=0.10\n","Neuron 3: Mean=0.03, Std=0.07, Min=-0.08, Max=0.12\n","Neuron 4: Mean=0.01, Std=0.06, Min=-0.11, Max=0.09\n","Neuron 5: Mean=-0.00, Std=0.07, Min=-0.09, Max=0.10\n","Neuron 6: Mean=-0.02, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 7: Mean=-0.00, Std=0.06, Min=-0.12, Max=0.11\n","Neuron 8: Mean=-0.03, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 9: Mean=0.01, Std=0.05, Min=-0.14, Max=0.13\n","Neuron 10: Mean=-0.00, Std=0.05, Min=-0.09, Max=0.09\n","Neuron 11: Mean=0.01, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 12: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 13: Mean=-0.03, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 14: Mean=-0.00, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 15: Mean=0.00, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 16: Mean=-0.01, Std=0.06, Min=-0.13, Max=0.08\n","Neuron 17: Mean=-0.03, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 18: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 19: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 20: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 21: Mean=0.01, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 22: Mean=0.02, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 23: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 24: Mean=-0.02, Std=0.05, Min=-0.10, Max=0.07\n","Neuron 25: Mean=0.00, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 26: Mean=0.01, Std=0.06, Min=-0.09, Max=0.09\n","Neuron 27: Mean=0.01, Std=0.07, Min=-0.10, Max=0.13\n","Neuron 28: Mean=0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 29: Mean=-0.03, Std=0.05, Min=-0.11, Max=0.09\n","Neuron 30: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 31: Mean=0.01, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 32: Mean=0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 33: Mean=0.02, Std=0.07, Min=-0.08, Max=0.11\n","Neuron 34: Mean=0.00, Std=0.05, Min=-0.10, Max=0.07\n","Neuron 35: Mean=0.02, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 36: Mean=0.01, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 37: Mean=-0.01, Std=0.05, Min=-0.10, Max=0.10\n","Neuron 38: Mean=-0.01, Std=0.07, Min=-0.11, Max=0.09\n","Neuron 39: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 40: Mean=-0.01, Std=0.06, Min=-0.11, Max=0.10\n","Neuron 41: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 42: Mean=0.02, Std=0.05, Min=-0.10, Max=0.10\n","Neuron 43: Mean=-0.05, Std=0.05, Min=-0.10, Max=0.09\n","Neuron 44: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 45: Mean=-0.01, Std=0.06, Min=-0.11, Max=0.10\n","Neuron 46: Mean=-0.01, Std=0.05, Min=-0.11, Max=0.11\n","Neuron 47: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 48: Mean=0.02, Std=0.07, Min=-0.09, Max=0.12\n","Neuron 49: Mean=0.02, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 50: Mean=0.01, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 51: Mean=0.01, Std=0.07, Min=-0.09, Max=0.12\n","Neuron 52: Mean=0.02, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 53: Mean=0.02, Std=0.05, Min=-0.06, Max=0.10\n","Neuron 54: Mean=0.03, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 55: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 56: Mean=0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 57: Mean=0.03, Std=0.07, Min=-0.10, Max=0.19\n","Neuron 58: Mean=-0.00, Std=0.07, Min=-0.11, Max=0.12\n","Neuron 59: Mean=0.03, Std=0.05, Min=-0.07, Max=0.11\n","Neuron 60: Mean=0.02, Std=0.05, Min=-0.06, Max=0.10\n","Neuron 61: Mean=0.01, Std=0.06, Min=-0.10, Max=0.12\n","Neuron 62: Mean=-0.04, Std=0.04, Min=-0.09, Max=0.04\n","Neuron 63: Mean=0.00, Std=0.06, Min=-0.11, Max=0.10\n","Neuron 64: Mean=0.00, Std=0.07, Min=-0.09, Max=0.11\n","Neuron 65: Mean=0.00, Std=0.07, Min=-0.11, Max=0.10\n","Neuron 66: Mean=-0.01, Std=0.05, Min=-0.10, Max=0.10\n","Neuron 67: Mean=0.01, Std=0.06, Min=-0.09, Max=0.12\n","Neuron 68: Mean=0.02, Std=0.06, Min=-0.10, Max=0.12\n","Neuron 69: Mean=0.00, Std=0.07, Min=-0.11, Max=0.08\n","Neuron 70: Mean=0.01, Std=0.06, Min=-0.07, Max=0.10\n","Neuron 71: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 72: Mean=0.01, Std=0.07, Min=-0.08, Max=0.10\n","Neuron 73: Mean=-0.02, Std=0.07, Min=-0.11, Max=0.10\n","Neuron 74: Mean=-0.00, Std=0.05, Min=-0.09, Max=0.08\n","Neuron 75: Mean=0.03, Std=0.07, Min=-0.07, Max=0.17\n","Neuron 76: Mean=-0.00, Std=0.05, Min=-0.09, Max=0.09\n","Neuron 77: Mean=0.02, Std=0.06, Min=-0.09, Max=0.13\n","Neuron 78: Mean=-0.00, Std=0.05, Min=-0.10, Max=0.10\n","Neuron 79: Mean=-0.02, Std=0.06, Min=-0.12, Max=0.09\n","Neuron 80: Mean=-0.01, Std=0.06, Min=-0.11, Max=0.09\n","Neuron 81: Mean=0.03, Std=0.05, Min=-0.06, Max=0.09\n","Neuron 82: Mean=0.01, Std=0.05, Min=-0.08, Max=0.09\n","Neuron 83: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.08\n","Neuron 84: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 85: Mean=0.01, Std=0.07, Min=-0.11, Max=0.10\n","Neuron 86: Mean=0.03, Std=0.06, Min=-0.10, Max=0.12\n","Neuron 87: Mean=-0.01, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 88: Mean=0.01, Std=0.07, Min=-0.10, Max=0.13\n","Neuron 89: Mean=0.03, Std=0.05, Min=-0.08, Max=0.10\n","Neuron 90: Mean=-0.01, Std=0.05, Min=-0.09, Max=0.09\n","Neuron 91: Mean=-0.01, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 92: Mean=0.01, Std=0.05, Min=-0.09, Max=0.10\n","Neuron 93: Mean=0.00, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 94: Mean=0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 95: Mean=0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 96: Mean=-0.03, Std=0.04, Min=-0.10, Max=0.05\n","Neuron 97: Mean=0.03, Std=0.06, Min=-0.08, Max=0.11\n","Neuron 98: Mean=-0.00, Std=0.06, Min=-0.11, Max=0.08\n","Neuron 99: Mean=-0.00, Std=0.06, Min=-0.11, Max=0.10\n","Neuron 100: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 101: Mean=-0.01, Std=0.05, Min=-0.07, Max=0.12\n","Neuron 102: Mean=0.01, Std=0.06, Min=-0.08, Max=0.10\n","Neuron 103: Mean=-0.01, Std=0.06, Min=-0.11, Max=0.08\n","Neuron 104: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 105: Mean=-0.00, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 106: Mean=-0.03, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 107: Mean=-0.02, Std=0.05, Min=-0.11, Max=0.09\n","Neuron 108: Mean=0.02, Std=0.06, Min=-0.08, Max=0.11\n","Neuron 109: Mean=-0.01, Std=0.07, Min=-0.19, Max=0.10\n","Neuron 110: Mean=0.01, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 111: Mean=-0.00, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 112: Mean=0.00, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 113: Mean=0.01, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 114: Mean=-0.01, Std=0.05, Min=-0.10, Max=0.07\n","Neuron 115: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 116: Mean=0.01, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 117: Mean=-0.03, Std=0.05, Min=-0.10, Max=0.06\n","Neuron 118: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 119: Mean=0.01, Std=0.06, Min=-0.07, Max=0.10\n","Neuron 120: Mean=-0.02, Std=0.05, Min=-0.11, Max=0.06\n","Neuron 121: Mean=0.03, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 122: Mean=-0.03, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 123: Mean=-0.02, Std=0.06, Min=-0.11, Max=0.10\n","Neuron 124: Mean=-0.01, Std=0.05, Min=-0.09, Max=0.08\n","Neuron 125: Mean=0.03, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 126: Mean=-0.02, Std=0.05, Min=-0.09, Max=0.09\n","Neuron 127: Mean=0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 128: Mean=0.03, Std=0.05, Min=-0.08, Max=0.10\n","Neuron 129: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 130: Mean=-0.01, Std=0.06, Min=-0.13, Max=0.09\n","Neuron 131: Mean=-0.00, Std=0.05, Min=-0.10, Max=0.08\n","Neuron 132: Mean=0.01, Std=0.05, Min=-0.08, Max=0.12\n","Neuron 133: Mean=0.00, Std=0.05, Min=-0.09, Max=0.09\n","Neuron 134: Mean=-0.00, Std=0.07, Min=-0.10, Max=0.11\n","Neuron 135: Mean=0.01, Std=0.05, Min=-0.09, Max=0.10\n","Neuron 136: Mean=0.02, Std=0.07, Min=-0.09, Max=0.10\n","Neuron 137: Mean=0.01, Std=0.05, Min=-0.06, Max=0.12\n","Neuron 138: Mean=0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 139: Mean=0.01, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 140: Mean=-0.02, Std=0.05, Min=-0.11, Max=0.08\n","Neuron 141: Mean=0.03, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 142: Mean=0.05, Std=0.06, Min=-0.07, Max=0.11\n","Neuron 143: Mean=0.02, Std=0.05, Min=-0.09, Max=0.10\n","Neuron 144: Mean=-0.01, Std=0.04, Min=-0.10, Max=0.07\n","Neuron 145: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 146: Mean=-0.03, Std=0.05, Min=-0.10, Max=0.06\n","Neuron 147: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 148: Mean=0.00, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 149: Mean=-0.04, Std=0.05, Min=-0.11, Max=0.07\n","Neuron 150: Mean=-0.01, Std=0.05, Min=-0.10, Max=0.06\n","Neuron 151: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 152: Mean=0.03, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 153: Mean=-0.01, Std=0.05, Min=-0.10, Max=0.07\n","Neuron 154: Mean=0.02, Std=0.07, Min=-0.09, Max=0.11\n","Neuron 155: Mean=-0.00, Std=0.06, Min=-0.12, Max=0.11\n","Neuron 156: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 157: Mean=0.02, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 158: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.11\n","Neuron 159: Mean=0.03, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 160: Mean=0.01, Std=0.07, Min=-0.10, Max=0.11\n","Neuron 161: Mean=-0.01, Std=0.05, Min=-0.10, Max=0.08\n","Neuron 162: Mean=0.02, Std=0.06, Min=-0.08, Max=0.12\n","Neuron 163: Mean=0.02, Std=0.05, Min=-0.09, Max=0.10\n","Neuron 164: Mean=0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 165: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 166: Mean=-0.02, Std=0.07, Min=-0.11, Max=0.08\n","Neuron 167: Mean=0.03, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 168: Mean=-0.00, Std=0.07, Min=-0.09, Max=0.10\n","Neuron 169: Mean=0.00, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 170: Mean=-0.01, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 171: Mean=-0.01, Std=0.06, Min=-0.08, Max=0.09\n","Neuron 172: Mean=0.02, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 173: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 174: Mean=-0.01, Std=0.05, Min=-0.08, Max=0.08\n","Neuron 175: Mean=-0.00, Std=0.06, Min=-0.09, Max=0.08\n","Neuron 176: Mean=0.02, Std=0.05, Min=-0.08, Max=0.11\n","Neuron 177: Mean=-0.00, Std=0.06, Min=-0.11, Max=0.08\n","Neuron 178: Mean=0.00, Std=0.05, Min=-0.10, Max=0.10\n","Neuron 179: Mean=-0.00, Std=0.06, Min=-0.11, Max=0.10\n","Neuron 180: Mean=0.03, Std=0.05, Min=-0.07, Max=0.10\n","Neuron 181: Mean=-0.01, Std=0.06, Min=-0.11, Max=0.09\n","Neuron 182: Mean=0.00, Std=0.06, Min=-0.11, Max=0.09\n","Neuron 183: Mean=0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 184: Mean=0.02, Std=0.07, Min=-0.10, Max=0.12\n","Neuron 185: Mean=-0.01, Std=0.07, Min=-0.13, Max=0.11\n","Neuron 186: Mean=-0.00, Std=0.07, Min=-0.14, Max=0.09\n","Neuron 187: Mean=-0.01, Std=0.05, Min=-0.10, Max=0.07\n","Neuron 188: Mean=0.03, Std=0.06, Min=-0.08, Max=0.11\n","Neuron 189: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 190: Mean=0.03, Std=0.05, Min=-0.06, Max=0.11\n","Neuron 191: Mean=-0.01, Std=0.05, Min=-0.10, Max=0.09\n","Neuron 192: Mean=-0.01, Std=0.05, Min=-0.11, Max=0.08\n","Neuron 193: Mean=0.00, Std=0.05, Min=-0.11, Max=0.11\n","Neuron 194: Mean=-0.02, Std=0.06, Min=-0.11, Max=0.11\n","Neuron 195: Mean=0.00, Std=0.07, Min=-0.10, Max=0.09\n","Neuron 196: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 197: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 198: Mean=-0.01, Std=0.05, Min=-0.09, Max=0.07\n","Neuron 199: Mean=0.01, Std=0.05, Min=-0.08, Max=0.09\n","Neuron 200: Mean=0.01, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 201: Mean=0.01, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 202: Mean=-0.02, Std=0.05, Min=-0.10, Max=0.06\n","Neuron 203: Mean=0.00, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 204: Mean=0.01, Std=0.05, Min=-0.09, Max=0.11\n","Neuron 205: Mean=0.01, Std=0.07, Min=-0.08, Max=0.10\n","Neuron 206: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 207: Mean=0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 208: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 209: Mean=0.02, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 210: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 211: Mean=0.01, Std=0.06, Min=-0.11, Max=0.10\n","Neuron 212: Mean=0.01, Std=0.05, Min=-0.08, Max=0.10\n","Neuron 213: Mean=0.02, Std=0.05, Min=-0.08, Max=0.09\n","Neuron 214: Mean=0.03, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 215: Mean=-0.00, Std=0.06, Min=-0.08, Max=0.10\n","Neuron 216: Mean=-0.01, Std=0.06, Min=-0.12, Max=0.09\n","Neuron 217: Mean=-0.02, Std=0.05, Min=-0.11, Max=0.10\n","Neuron 218: Mean=0.04, Std=0.06, Min=-0.06, Max=0.14\n","Neuron 219: Mean=0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 220: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.08\n","Neuron 221: Mean=0.01, Std=0.06, Min=-0.09, Max=0.09\n","Neuron 222: Mean=-0.02, Std=0.07, Min=-0.10, Max=0.09\n","Neuron 223: Mean=-0.01, Std=0.06, Min=-0.13, Max=0.10\n","Neuron 224: Mean=0.01, Std=0.06, Min=-0.07, Max=0.10\n","Neuron 225: Mean=0.01, Std=0.06, Min=-0.08, Max=0.11\n","Neuron 226: Mean=0.04, Std=0.05, Min=-0.09, Max=0.10\n","Neuron 227: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 228: Mean=0.00, Std=0.05, Min=-0.11, Max=0.08\n","Neuron 229: Mean=0.00, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 230: Mean=0.03, Std=0.06, Min=-0.08, Max=0.10\n","Neuron 231: Mean=0.00, Std=0.06, Min=-0.13, Max=0.10\n","Neuron 232: Mean=0.03, Std=0.05, Min=-0.07, Max=0.10\n","Neuron 233: Mean=-0.02, Std=0.07, Min=-0.10, Max=0.09\n","Neuron 234: Mean=0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 235: Mean=0.01, Std=0.06, Min=-0.11, Max=0.09\n","Neuron 236: Mean=0.02, Std=0.06, Min=-0.11, Max=0.11\n","Neuron 237: Mean=-0.03, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 238: Mean=-0.01, Std=0.05, Min=-0.11, Max=0.07\n","Neuron 239: Mean=0.01, Std=0.07, Min=-0.11, Max=0.11\n","Neuron 240: Mean=0.00, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 241: Mean=-0.01, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 242: Mean=0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 243: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 244: Mean=-0.00, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 245: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 246: Mean=0.04, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 247: Mean=0.01, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 248: Mean=0.01, Std=0.06, Min=-0.10, Max=0.12\n","Neuron 249: Mean=-0.03, Std=0.06, Min=-0.11, Max=0.09\n","Neuron 250: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 251: Mean=-0.00, Std=0.06, Min=-0.11, Max=0.08\n","Neuron 252: Mean=-0.00, Std=0.06, Min=-0.12, Max=0.10\n","Neuron 253: Mean=-0.02, Std=0.05, Min=-0.08, Max=0.10\n","Neuron 254: Mean=-0.02, Std=0.07, Min=-0.12, Max=0.11\n","Neuron 255: Mean=0.01, Std=0.07, Min=-0.11, Max=0.10\n","Neuron 256: Mean=0.00, Std=0.05, Min=-0.10, Max=0.09\n","Neuron 257: Mean=0.02, Std=0.05, Min=-0.08, Max=0.11\n","Neuron 258: Mean=0.03, Std=0.04, Min=-0.06, Max=0.10\n","Neuron 259: Mean=0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 260: Mean=0.00, Std=0.07, Min=-0.11, Max=0.11\n","Neuron 261: Mean=0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 262: Mean=0.02, Std=0.05, Min=-0.08, Max=0.10\n","Neuron 263: Mean=-0.00, Std=0.07, Min=-0.12, Max=0.11\n","Neuron 264: Mean=0.02, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 265: Mean=-0.01, Std=0.07, Min=-0.11, Max=0.12\n","Neuron 266: Mean=0.00, Std=0.07, Min=-0.10, Max=0.09\n","Neuron 267: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 268: Mean=-0.00, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 269: Mean=0.01, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 270: Mean=-0.02, Std=0.07, Min=-0.11, Max=0.10\n","Neuron 271: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 272: Mean=0.00, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 273: Mean=0.03, Std=0.05, Min=-0.08, Max=0.11\n","Neuron 274: Mean=-0.01, Std=0.07, Min=-0.15, Max=0.11\n","Neuron 275: Mean=0.01, Std=0.06, Min=-0.08, Max=0.12\n","Neuron 276: Mean=0.02, Std=0.06, Min=-0.07, Max=0.10\n","Neuron 277: Mean=-0.02, Std=0.05, Min=-0.10, Max=0.10\n","Neuron 278: Mean=-0.02, Std=0.05, Min=-0.10, Max=0.08\n","Neuron 279: Mean=0.02, Std=0.05, Min=-0.10, Max=0.10\n","Neuron 280: Mean=0.01, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 281: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 282: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 283: Mean=0.02, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 284: Mean=0.01, Std=0.05, Min=-0.08, Max=0.10\n","Neuron 285: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 286: Mean=0.01, Std=0.06, Min=-0.09, Max=0.12\n","Neuron 287: Mean=0.03, Std=0.05, Min=-0.09, Max=0.12\n","Neuron 288: Mean=-0.01, Std=0.07, Min=-0.11, Max=0.10\n","Neuron 289: Mean=0.00, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 290: Mean=-0.02, Std=0.07, Min=-0.12, Max=0.11\n","Neuron 291: Mean=-0.01, Std=0.05, Min=-0.10, Max=0.11\n","Neuron 292: Mean=0.04, Std=0.06, Min=-0.09, Max=0.13\n","Neuron 293: Mean=0.03, Std=0.05, Min=-0.09, Max=0.10\n","Neuron 294: Mean=0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 295: Mean=0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 296: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 297: Mean=0.02, Std=0.05, Min=-0.06, Max=0.09\n","Neuron 298: Mean=-0.00, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 299: Mean=0.02, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 300: Mean=-0.03, Std=0.06, Min=-0.11, Max=0.08\n","Neuron 301: Mean=0.02, Std=0.06, Min=-0.08, Max=0.11\n","Neuron 302: Mean=-0.00, Std=0.06, Min=-0.12, Max=0.08\n","Neuron 303: Mean=0.01, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 304: Mean=-0.00, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 305: Mean=-0.01, Std=0.06, Min=-0.13, Max=0.09\n","Neuron 306: Mean=-0.01, Std=0.06, Min=-0.11, Max=0.11\n","Neuron 307: Mean=-0.01, Std=0.05, Min=-0.10, Max=0.09\n","Neuron 308: Mean=-0.01, Std=0.06, Min=-0.11, Max=0.09\n","Neuron 309: Mean=0.01, Std=0.06, Min=-0.09, Max=0.08\n","Neuron 310: Mean=0.00, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 311: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 312: Mean=-0.02, Std=0.07, Min=-0.13, Max=0.09\n","Neuron 313: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.13\n","Neuron 314: Mean=0.02, Std=0.05, Min=-0.10, Max=0.10\n","Neuron 315: Mean=-0.02, Std=0.05, Min=-0.10, Max=0.08\n","Neuron 316: Mean=0.02, Std=0.06, Min=-0.08, Max=0.10\n","Neuron 317: Mean=0.01, Std=0.06, Min=-0.07, Max=0.11\n","Neuron 318: Mean=0.01, Std=0.06, Min=-0.11, Max=0.11\n","Neuron 319: Mean=-0.00, Std=0.05, Min=-0.10, Max=0.09\n","Neuron 320: Mean=0.02, Std=0.04, Min=-0.05, Max=0.09\n","Neuron 321: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 322: Mean=0.01, Std=0.06, Min=-0.09, Max=0.09\n","Neuron 323: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 324: Mean=-0.02, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 325: Mean=0.01, Std=0.05, Min=-0.09, Max=0.10\n","Neuron 326: Mean=-0.03, Std=0.05, Min=-0.12, Max=0.07\n","Neuron 327: Mean=-0.00, Std=0.06, Min=-0.09, Max=0.09\n","Neuron 328: Mean=0.02, Std=0.05, Min=-0.09, Max=0.10\n","Neuron 329: Mean=-0.00, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 330: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 331: Mean=-0.03, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 332: Mean=-0.03, Std=0.06, Min=-0.11, Max=0.09\n","Neuron 333: Mean=0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 334: Mean=0.00, Std=0.06, Min=-0.12, Max=0.10\n","Neuron 335: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 336: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.08\n","Neuron 337: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 338: Mean=0.02, Std=0.06, Min=-0.06, Max=0.12\n","Neuron 339: Mean=-0.00, Std=0.07, Min=-0.11, Max=0.11\n","Neuron 340: Mean=0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 341: Mean=0.02, Std=0.07, Min=-0.11, Max=0.10\n","Neuron 342: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 343: Mean=0.01, Std=0.06, Min=-0.10, Max=0.07\n","Neuron 344: Mean=0.02, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 345: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 346: Mean=-0.00, Std=0.07, Min=-0.11, Max=0.10\n","Neuron 347: Mean=-0.00, Std=0.06, Min=-0.11, Max=0.10\n","Neuron 348: Mean=-0.01, Std=0.05, Min=-0.11, Max=0.08\n","Neuron 349: Mean=0.00, Std=0.07, Min=-0.12, Max=0.13\n","Neuron 350: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.08\n","Neuron 351: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 352: Mean=0.00, Std=0.06, Min=-0.11, Max=0.09\n","Neuron 353: Mean=-0.02, Std=0.06, Min=-0.12, Max=0.08\n","Neuron 354: Mean=0.02, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 355: Mean=-0.02, Std=0.06, Min=-0.11, Max=0.11\n","Neuron 356: Mean=0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 357: Mean=-0.01, Std=0.05, Min=-0.11, Max=0.10\n","Neuron 358: Mean=-0.00, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 359: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 360: Mean=0.02, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 361: Mean=-0.02, Std=0.06, Min=-0.13, Max=0.08\n","Neuron 362: Mean=-0.02, Std=0.06, Min=-0.11, Max=0.08\n","Neuron 363: Mean=-0.01, Std=0.06, Min=-0.11, Max=0.11\n","Neuron 364: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 365: Mean=0.00, Std=0.06, Min=-0.11, Max=0.10\n","Neuron 366: Mean=0.01, Std=0.07, Min=-0.14, Max=0.09\n","Neuron 367: Mean=0.01, Std=0.06, Min=-0.11, Max=0.12\n","Neuron 368: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 369: Mean=-0.02, Std=0.05, Min=-0.10, Max=0.09\n","Neuron 370: Mean=-0.03, Std=0.05, Min=-0.09, Max=0.09\n","Neuron 371: Mean=-0.02, Std=0.05, Min=-0.09, Max=0.09\n","Neuron 372: Mean=0.02, Std=0.06, Min=-0.13, Max=0.12\n","Neuron 373: Mean=-0.00, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 374: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 375: Mean=-0.03, Std=0.06, Min=-0.11, Max=0.09\n","Neuron 376: Mean=0.00, Std=0.07, Min=-0.10, Max=0.11\n","Neuron 377: Mean=0.03, Std=0.05, Min=-0.07, Max=0.11\n","Neuron 378: Mean=0.01, Std=0.05, Min=-0.11, Max=0.09\n","Neuron 379: Mean=-0.02, Std=0.07, Min=-0.11, Max=0.10\n","Neuron 380: Mean=-0.01, Std=0.05, Min=-0.10, Max=0.06\n","Neuron 381: Mean=-0.02, Std=0.05, Min=-0.10, Max=0.10\n","Neuron 382: Mean=-0.01, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 383: Mean=0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 384: Mean=-0.02, Std=0.07, Min=-0.13, Max=0.11\n","Neuron 385: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 386: Mean=-0.00, Std=0.05, Min=-0.07, Max=0.10\n","Neuron 387: Mean=0.02, Std=0.05, Min=-0.09, Max=0.10\n","Neuron 388: Mean=-0.00, Std=0.06, Min=-0.11, Max=0.10\n","Neuron 389: Mean=0.01, Std=0.06, Min=-0.09, Max=0.09\n","Neuron 390: Mean=0.04, Std=0.07, Min=-0.09, Max=0.13\n","Neuron 391: Mean=-0.02, Std=0.07, Min=-0.13, Max=0.12\n","Neuron 392: Mean=-0.01, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 393: Mean=0.01, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 394: Mean=-0.00, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 395: Mean=0.01, Std=0.07, Min=-0.13, Max=0.10\n","Neuron 396: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 397: Mean=0.01, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 398: Mean=0.01, Std=0.07, Min=-0.11, Max=0.10\n","Neuron 399: Mean=-0.01, Std=0.06, Min=-0.11, Max=0.09\n","Neuron 400: Mean=-0.01, Std=0.05, Min=-0.09, Max=0.10\n","Neuron 401: Mean=-0.03, Std=0.06, Min=-0.12, Max=0.08\n","Neuron 402: Mean=0.02, Std=0.06, Min=-0.11, Max=0.11\n","Neuron 403: Mean=0.00, Std=0.05, Min=-0.09, Max=0.11\n","Neuron 404: Mean=-0.00, Std=0.06, Min=-0.11, Max=0.10\n","Neuron 405: Mean=0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 406: Mean=0.03, Std=0.06, Min=-0.10, Max=0.12\n","Neuron 407: Mean=-0.01, Std=0.06, Min=-0.09, Max=0.09\n","Neuron 408: Mean=0.00, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 409: Mean=0.00, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 410: Mean=0.02, Std=0.05, Min=-0.09, Max=0.10\n","Neuron 411: Mean=-0.03, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 412: Mean=-0.00, Std=0.05, Min=-0.10, Max=0.08\n","Neuron 413: Mean=0.01, Std=0.05, Min=-0.10, Max=0.10\n","Neuron 414: Mean=-0.01, Std=0.07, Min=-0.11, Max=0.10\n","Neuron 415: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.08\n","Neuron 416: Mean=0.02, Std=0.07, Min=-0.08, Max=0.11\n","Neuron 417: Mean=-0.00, Std=0.06, Min=-0.09, Max=0.09\n","Neuron 418: Mean=0.00, Std=0.05, Min=-0.08, Max=0.08\n","Neuron 419: Mean=-0.03, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 420: Mean=0.01, Std=0.07, Min=-0.10, Max=0.11\n","Neuron 421: Mean=0.00, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 422: Mean=0.01, Std=0.05, Min=-0.09, Max=0.10\n","Neuron 423: Mean=0.00, Std=0.05, Min=-0.10, Max=0.08\n","Neuron 424: Mean=0.01, Std=0.07, Min=-0.08, Max=0.12\n","Neuron 425: Mean=0.00, Std=0.05, Min=-0.09, Max=0.10\n","Neuron 426: Mean=-0.01, Std=0.06, Min=-0.09, Max=0.08\n","Neuron 427: Mean=0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 428: Mean=0.00, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 429: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 430: Mean=-0.01, Std=0.05, Min=-0.11, Max=0.09\n","Neuron 431: Mean=0.01, Std=0.05, Min=-0.07, Max=0.10\n","Neuron 432: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 433: Mean=-0.03, Std=0.05, Min=-0.10, Max=0.07\n","Neuron 434: Mean=-0.00, Std=0.05, Min=-0.10, Max=0.07\n","Neuron 435: Mean=-0.01, Std=0.06, Min=-0.11, Max=0.10\n","Neuron 436: Mean=-0.04, Std=0.07, Min=-0.14, Max=0.11\n","Neuron 437: Mean=0.00, Std=0.07, Min=-0.09, Max=0.12\n","Neuron 438: Mean=-0.03, Std=0.06, Min=-0.10, Max=0.08\n","Neuron 439: Mean=-0.01, Std=0.07, Min=-0.11, Max=0.10\n","Neuron 440: Mean=-0.03, Std=0.06, Min=-0.11, Max=0.09\n","Neuron 441: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 442: Mean=-0.03, Std=0.07, Min=-0.13, Max=0.10\n","Neuron 443: Mean=0.00, Std=0.07, Min=-0.10, Max=0.11\n","Neuron 444: Mean=-0.04, Std=0.06, Min=-0.11, Max=0.10\n","Neuron 445: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 446: Mean=0.01, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 447: Mean=0.02, Std=0.06, Min=-0.05, Max=0.10\n","Neuron 448: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 449: Mean=-0.00, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 450: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 451: Mean=-0.02, Std=0.05, Min=-0.11, Max=0.08\n","Neuron 452: Mean=-0.03, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 453: Mean=-0.00, Std=0.07, Min=-0.10, Max=0.11\n","Neuron 454: Mean=-0.01, Std=0.05, Min=-0.09, Max=0.10\n","Neuron 455: Mean=0.02, Std=0.05, Min=-0.09, Max=0.10\n","Neuron 456: Mean=-0.00, Std=0.05, Min=-0.08, Max=0.08\n","Neuron 457: Mean=0.01, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 458: Mean=0.01, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 459: Mean=-0.01, Std=0.06, Min=-0.11, Max=0.10\n","Neuron 460: Mean=-0.00, Std=0.07, Min=-0.11, Max=0.11\n","Neuron 461: Mean=-0.03, Std=0.06, Min=-0.11, Max=0.09\n","Neuron 462: Mean=0.01, Std=0.08, Min=-0.10, Max=0.11\n","Neuron 463: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.12\n","Neuron 464: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 465: Mean=0.02, Std=0.05, Min=-0.10, Max=0.07\n","Neuron 466: Mean=-0.01, Std=0.06, Min=-0.08, Max=0.10\n","Neuron 467: Mean=0.02, Std=0.06, Min=-0.08, Max=0.11\n","Neuron 468: Mean=-0.04, Std=0.07, Min=-0.11, Max=0.10\n","Neuron 469: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 470: Mean=-0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 471: Mean=0.02, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 472: Mean=-0.00, Std=0.07, Min=-0.11, Max=0.11\n","Neuron 473: Mean=0.01, Std=0.06, Min=-0.11, Max=0.08\n","Neuron 474: Mean=-0.01, Std=0.05, Min=-0.10, Max=0.08\n","Neuron 475: Mean=0.01, Std=0.06, Min=-0.12, Max=0.10\n","Neuron 476: Mean=0.00, Std=0.08, Min=-0.11, Max=0.14\n","Neuron 477: Mean=0.02, Std=0.07, Min=-0.10, Max=0.11\n","Neuron 478: Mean=-0.00, Std=0.07, Min=-0.09, Max=0.10\n","Neuron 479: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 480: Mean=-0.00, Std=0.05, Min=-0.07, Max=0.07\n","Neuron 481: Mean=-0.01, Std=0.05, Min=-0.09, Max=0.09\n","Neuron 482: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 483: Mean=0.00, Std=0.06, Min=-0.11, Max=0.09\n","Neuron 484: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 485: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.11\n","Neuron 486: Mean=0.01, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 487: Mean=-0.01, Std=0.05, Min=-0.11, Max=0.10\n","Neuron 488: Mean=0.02, Std=0.07, Min=-0.11, Max=0.11\n","Neuron 489: Mean=0.02, Std=0.06, Min=-0.08, Max=0.14\n","Neuron 490: Mean=-0.03, Std=0.06, Min=-0.10, Max=0.08\n","Neuron 491: Mean=-0.00, Std=0.07, Min=-0.11, Max=0.09\n","Neuron 492: Mean=0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 493: Mean=-0.01, Std=0.05, Min=-0.10, Max=0.08\n","Neuron 494: Mean=0.00, Std=0.05, Min=-0.08, Max=0.11\n","Neuron 495: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 496: Mean=0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 497: Mean=0.02, Std=0.06, Min=-0.10, Max=0.09\n","Neuron 498: Mean=0.02, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 499: Mean=-0.01, Std=0.06, Min=-0.09, Max=0.09\n","Neuron 500: Mean=0.00, Std=0.06, Min=-0.09, Max=0.11\n","Neuron 501: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 502: Mean=0.01, Std=0.06, Min=-0.10, Max=0.12\n","Neuron 503: Mean=-0.01, Std=0.08, Min=-0.11, Max=0.11\n","Neuron 504: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.09\n","Neuron 505: Mean=-0.01, Std=0.06, Min=-0.09, Max=0.09\n","Neuron 506: Mean=-0.01, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 507: Mean=-0.01, Std=0.06, Min=-0.11, Max=0.08\n","Neuron 508: Mean=-0.00, Std=0.06, Min=-0.10, Max=0.10\n","Neuron 509: Mean=0.00, Std=0.05, Min=-0.09, Max=0.09\n","Neuron 510: Mean=-0.02, Std=0.06, Min=-0.09, Max=0.10\n","Neuron 511: Mean=-0.01, Std=0.07, Min=-0.10, Max=0.10\n","Neuron 512: Mean=0.00, Std=0.06, Min=-0.11, Max=0.10\n","Layer 2:\n","Neuron 1: Mean=0.00, Std=0.07, Min=-0.19, Max=0.17\n"]}]},{"cell_type":"code","source":["# Plotting feature importance for each layer\n","from sklearn.inspection import permutation_importance\n","layer_importances = []  # List to store the layer importances\n","\n","# Iterate over the layers and compute the importances\n","for layer in neuralNetwork.coefs_:\n","    importance = permutation_importance(neuralNetwork, X_train, y_train, n_repeats=10)\n","    layer_importances.append(importance)\n","plt.figure(figsize=(12, 8))  # Adjust the figure size as per your preference\n","plt.title('Feature Importance by Layer')\n","\n","bar_width = 0.2  # Width of each bar\n","layer_distance = 0.4  # Distance between layers\n","\n","for layer_index, importances in enumerate(layer_importances):\n","    sorted_idx = importances.importances_mean.argsort()\n","    layer_offset = layer_index * layer_distance\n","    \n","    plt.barh(np.arange(X_train.shape[1]) + layer_offset, importances.importances_mean[sorted_idx], height=bar_width, label='Layer {}'.format(layer_index + 1))\n","# Print feature importance for each layer\n","feature_names=X_train.columns\n","for layer_index, importances in enumerate(layer_importances):\n","    sorted_idx = importances.importances_mean.argsort()\n","    \n","    for i, value in enumerate(importances.importances_mean[sorted_idx]):\n","        feature_name = feature_names[sorted_idx[i]]\n","        print(f\"Feature importance of Layer {layer_index + 1}: - {feature_name}: {value:.3f}\")\n","            \n","    # Add numeric values to the bars and print feature importance\n","    for i, value in enumerate(importances.importances_mean[sorted_idx]):\n","        feature_name = feature_names[sorted_idx[i]]\n","        print(f\"Feature importance of Layer {layer_index + 1}: - {feature_name}: {value:.3f}\")\n","        plt.text(value, i + layer_offset, f'{value:.3f}', va='center')\n","    \n","plt.yticks(np.arange(X_train.shape[1]), np.array(feature_names)[sorted_idx])\n","plt.xlabel('Importance')\n","plt.legend()\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"id":"oMrAfkFLzQSP","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1684850231067,"user_tz":-600,"elapsed":5739,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"737a7f20-f5d4-4aaf-b20e-d304c1d78ab1"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["Feature importance of Layer 1: - diuretic: 0.001\n","Feature importance of Layer 1: - exang: 0.001\n","Feature importance of Layer 1: - fbs: 0.001\n","Feature importance of Layer 1: - nitr: 0.003\n","Feature importance of Layer 1: - restecg: 0.003\n","Feature importance of Layer 1: - prop: 0.003\n","Feature importance of Layer 1: - slope: 0.009\n","Feature importance of Layer 1: - pro: 0.013\n","Feature importance of Layer 1: - thal: 0.014\n","Feature importance of Layer 1: - sex: 0.014\n","Feature importance of Layer 1: - age: 0.032\n","Feature importance of Layer 1: - cp: 0.074\n","Feature importance of Layer 1: - chol: 0.101\n","Feature importance of Layer 1: - oldpeak: 0.165\n","Feature importance of Layer 1: - thalach: 0.974\n","Feature importance of Layer 1: - tpeakbps: 1.343\n","Feature importance of Layer 1: - thalrest: 1.456\n","Feature importance of Layer 1: - trestbpd: 1.900\n","Feature importance of Layer 1: - trestbps: 3.120\n","Feature importance of Layer 1: - tpeakbpd: 7.772\n","Feature importance of Layer 1: - diuretic: 0.001\n","Feature importance of Layer 1: - exang: 0.001\n","Feature importance of Layer 1: - fbs: 0.001\n","Feature importance of Layer 1: - nitr: 0.003\n","Feature importance of Layer 1: - restecg: 0.003\n","Feature importance of Layer 1: - prop: 0.003\n","Feature importance of Layer 1: - slope: 0.009\n","Feature importance of Layer 1: - pro: 0.013\n","Feature importance of Layer 1: - thal: 0.014\n","Feature importance of Layer 1: - sex: 0.014\n","Feature importance of Layer 1: - age: 0.032\n","Feature importance of Layer 1: - cp: 0.074\n","Feature importance of Layer 1: - chol: 0.101\n","Feature importance of Layer 1: - oldpeak: 0.165\n","Feature importance of Layer 1: - thalach: 0.974\n","Feature importance of Layer 1: - tpeakbps: 1.343\n","Feature importance of Layer 1: - thalrest: 1.456\n","Feature importance of Layer 1: - trestbpd: 1.900\n","Feature importance of Layer 1: - trestbps: 3.120\n","Feature importance of Layer 1: - tpeakbpd: 7.772\n","Feature importance of Layer 2: - diuretic: 0.000\n","Feature importance of Layer 2: - fbs: 0.001\n","Feature importance of Layer 2: - prop: 0.002\n","Feature importance of Layer 2: - restecg: 0.002\n","Feature importance of Layer 2: - exang: 0.002\n","Feature importance of Layer 2: - nitr: 0.003\n","Feature importance of Layer 2: - slope: 0.009\n","Feature importance of Layer 2: - thal: 0.013\n","Feature importance of Layer 2: - pro: 0.014\n","Feature importance of Layer 2: - sex: 0.016\n","Feature importance of Layer 2: - age: 0.033\n","Feature importance of Layer 2: - cp: 0.071\n","Feature importance of Layer 2: - chol: 0.115\n","Feature importance of Layer 2: - oldpeak: 0.164\n","Feature importance of Layer 2: - thalach: 1.012\n","Feature importance of Layer 2: - tpeakbps: 1.209\n","Feature importance of Layer 2: - thalrest: 1.432\n","Feature importance of Layer 2: - trestbpd: 1.870\n","Feature importance of Layer 2: - trestbps: 3.161\n","Feature importance of Layer 2: - tpeakbpd: 7.569\n","Feature importance of Layer 2: - diuretic: 0.000\n","Feature importance of Layer 2: - fbs: 0.001\n","Feature importance of Layer 2: - prop: 0.002\n","Feature importance of Layer 2: - restecg: 0.002\n","Feature importance of Layer 2: - exang: 0.002\n","Feature importance of Layer 2: - nitr: 0.003\n","Feature importance of Layer 2: - slope: 0.009\n","Feature importance of Layer 2: - thal: 0.013\n","Feature importance of Layer 2: - pro: 0.014\n","Feature importance of Layer 2: - sex: 0.016\n","Feature importance of Layer 2: - age: 0.033\n","Feature importance of Layer 2: - cp: 0.071\n","Feature importance of Layer 2: - chol: 0.115\n","Feature importance of Layer 2: - oldpeak: 0.164\n","Feature importance of Layer 2: - thalach: 1.012\n","Feature importance of Layer 2: - tpeakbps: 1.209\n","Feature importance of Layer 2: - thalrest: 1.432\n","Feature importance of Layer 2: - trestbpd: 1.870\n","Feature importance of Layer 2: - trestbps: 3.161\n","Feature importance of Layer 2: - tpeakbpd: 7.569\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Regression"],"metadata":{"id":"dTFfpR68wx04"}},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","#temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.12, random_state=42)"],"metadata":{"id":"ztDWEC1Aw06w","executionInfo":{"status":"ok","timestamp":1684849958337,"user_tz":-600,"elapsed":306,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["hidden_layers = [128]\n","hidden_activation = 'relu'\n","solver_algo = 'adam'\n","lr_init = 0.001\n","lr = 'constant'\n","batch_size = 32\n","epochs = 5"],"metadata":{"id":"tEovXH15w3cq","executionInfo":{"status":"ok","timestamp":1684849960163,"user_tz":-600,"elapsed":7,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"execution_count":45,"outputs":[]},{"cell_type":"code","source":["neuralNetwork = MLPRegressor(\n","    hidden_layer_sizes=hidden_layers, \n","    batch_size=batch_size, \n","    activation=hidden_activation, \n","    solver=solver_algo, \n","    learning_rate_init=lr_init, \n","    learning_rate = lr,\n","    max_iter=epochs,\n","    random_state=1\n",").fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RzOeggjHxDAe","executionInfo":{"status":"ok","timestamp":1684849962152,"user_tz":-600,"elapsed":483,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"8bb90f5e-6751-45d8-93e4-0ca79b82e2dc"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (5) reached and the optimization hasn't converged yet.\n"]}]},{"cell_type":"code","source":["y_train_preds = neuralNetwork.predict(X_train)\n","y_test_preds = neuralNetwork.predict(X_test)\n","\n","print(mean_squared_error(y_train, y_train_preds))\n","print(mean_absolute_error(y_train, y_train_preds))\n","\n","print(mean_squared_error(y_test, y_test_preds))\n","print(mean_absolute_error(y_test, y_test_preds))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GjfM7c7xxFhZ","executionInfo":{"status":"ok","timestamp":1684849964071,"user_tz":-600,"elapsed":8,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"43a55fdc-7af6-4068-bac0-3f98fb269ce3"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["1.5014565400532571\n","0.9631860837070207\n","1.703759707085431\n","0.9846019936949404\n"]}]},{"cell_type":"code","source":["# Plot the Predicted vs Actual values \n","plt.figure(figsize=(10, 6))\n","plt.scatter(y_train, y_train_preds, label='Train')\n","plt.scatter(y_test, y_test_preds, label='Test')\n","# plt.plot([0, 1], [0, 1], color='red', linestyle='--')\n","plt.xlabel('Actual')\n","plt.ylabel('Predicted')\n","plt.title('Predicted vs Actual')\n","plt.legend()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"1c1DqZ7K0m73","executionInfo":{"status":"ok","timestamp":1684849964706,"user_tz":-600,"elapsed":642,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"beca4687-4dc9-44e8-aac9-8a1fe7833fec"},"execution_count":48,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Plot Partial Dependence Plots\n","from sklearn.inspection import PartialDependenceDisplay\n","common_params = {\n","    \"subsample\": 50,\n","    \"n_jobs\": 2,\n","    \"random_state\": 42,\n","    \"grid_resolution\": 20\n","}\n","print(\"Plotting partial dependence plots...\")\n","features_info={\n","    #features of interest\n","    \"features\":[\"chol\", \"thalach\", \"tpeakbps\", \"trestbpd\", \"age\",\"cp\",\"sex\", \"thal\",  \"exang\" ],\n","    # type of pdp\n","    \"kind\": \"average\",\n","    #info regarding categorical features\n","    \"categorical_features\": [\"cp\",\"sex\", \"thal\",\"exang\", \"thal\", \"exang\" ]\n","}\n","_, ax = plt.subplots(ncols=3, nrows=3, figsize=(9, 8), constrained_layout=True)\n","display= PartialDependenceDisplay.from_estimator(\n","    neuralNetwork, X_train, **features_info, ax=ax, **common_params\n",")\n","_ = display.figure_.suptitle(\n","    \"Partial dependence of the heart disease measure\\n\"\n","    \"with an MLPRegressor\",\n","    fontsize=16,\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":845},"id":"Ao0KEap30uyo","executionInfo":{"status":"ok","timestamp":1684849976351,"user_tz":-600,"elapsed":6675,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"a0385e69-3786-4a46-ffc4-185e07731945"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["Plotting partial dependence plots...\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 900x800 with 9 Axes>"],"image/png":"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crRt2xYTJ07EM888A319frQhIqotElEXHmAhIiKiGpWeng4vLy9kZGQgKSmpWgkkERHRg/jMIxERUT12/PjxMsuSk5MRHh6OtLQ0DBo0iIkjERHVCLY8EhER1WMSiQQuLi5o3rw5bGxscOfOHZw+fRrZ2dlwc3PDwYMHVVNvEBERPQomj0RERPXY/PnzERERgevXryMtLQ0ymQze3t4YNGgQXn75ZdjY2Og6RCIiaiCYPBIREREREVGV+MwjERERERERVYnJIxEREREREVWJySMRERERERFVickjERERERERVYnJIxEREREREVWJySMRERERERFVSV/XATwKpVKJ+Ph4mJmZQSKR6DocIqqHhBDIysqCk5MTpFLN76ex/iGiR1Xd+udhrI+I6FFpWh/V6+QxPj4erq6uug6DiBqAW7duwcXFRePtWf8QUU3Rtv55GOsjIqopVdVH9Tp5NDMzA1DyIs3NzXUcDRHVR5mZmXB1dVXVJ5pi/UNEj6q69c/DWB8R0aPStD6q18ljadcMc3NzVpZE9Ei07erF+oeIasqjdjVlfURENaWq+ogD5hAREREREVGVmDwSERERERFRlZg8EhERETUSRQolNkfF46Pt0boOhYjqoXr9zCMRERERaS4uNRfP/XIaEgkwJtANbjbGug6JiOoRtjwSERERNRLeTUzRo1kTCAGsOxyr63CIqJ5h8khERETUiDwd4gkAWH/yFrLyi3QcDRHVJ0weiYiIiBqRrr628LEzRXZBMdafvK3rcIioHmHySERERNSISCQSVevjusMxUCiFjiMiovqCySMRERFRIzOsrTMsjQ1wKzUPuy4l6TocIqonmDwSERERNTJGMj2M7+AGAPj2YIyOoyGi+oLJIxEREVEj9FSwO/SlEhyLScX5Oxm6DoeI6gGdJo8rV65E69atYW5uDnNzcwQHB2Pr1q26DImIiIioUXC0MMLAVo4AgLWHYnUbDBHVCzpNHl1cXPDBBx8gMjISJ0+eRK9evTBkyBBcuHBBl2ERERERNQpPdykZOGdzVDzuZuXrOBoiqut0mjyGhYVh4MCB8PX1RdOmTfHuu+/C1NQUR48e1WVYRERERI1CG1dLtHe3QqFCiZ+Oxuk6HCKq4/R1HUAphUKBDRs2ICcnB8HBweVuU1BQgIKCAtXPmZmZjys8ImrkWP8QUV1R0/XR0yGe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Iqrz2rtboaWzha7DICKqNVq3PG7evBnff/89evTogcmTJ6Nr167w8fGBu7s7fvrpJ0yYMKE24iQiIiIiIiId0rrlMTU1FV5eXgAAc3Nz1dQcXbp0wf79+2s2OiIiIiIiIqoTtE4evby8EBMTAwDw8/PD+vXrAZS0SFpaWtZocERERERERFQ3aJ08Tp48GVFRUQCA119/HStWrIChoSFeeuklzJ07t8YDJCIiIiIiIt3T+pnHl156SfV97969ER0djcjISPj4+KB169Y1GhwRERERERHVDRonj0qlEh999BH+/vtvFBYWIjQ0FAsXLoS7uzvc3d1rM0YiIiIiIiLSMY27rb777rt44403YGpqCmdnZ3z22WeYNWtWbcZGREREREREdYTGyeP333+PL7/8Etu3b8eff/6JzZs346effoJSqazN+IiIiIiIiKgO0Dh5jIuLw8CBA1U/9+7dGxKJBPHx8bUSGBEREREREdUdGiePxcXFMDQ0VFtmYGCAoqKiRw5ixYoV8PDwgKGhITp27Ijjx48/8jGJiIiIiIio5mg8YI4QApMmTYJcLlcty8/Px/Tp02FiYqJatnHjRq0C+O233/Dyyy9j1apV6NixI5YtW4Z+/frh8uXLsLOz0+pYREREREREVDs0Th7Dw8PLLHvyyScfOYClS5di6tSpmDx5MgBg1apV+Pfff/Htt9/i9ddfV9u2oKAABQUFqp8zMzMf+fxERJpg/UNEdQXrIyLSFY2Tx7Vr19b4yQsLCxEZGYl58+aplkmlUvTu3RtHjhwps/3777+PxYsX13gcRERVYf1DRHUF6yMi0hWNn3msDffu3YNCoYC9vb3acnt7eyQmJpbZft68ecjIyFB93bp163GFSkSNHOsfIqorWB8Rka5o3PJYF8jlcrVnLomIHhfWP0RUV7A+IiJd0WnLo62tLfT09JCUlKS2PCkpCQ4ODjqKioiIiIiIiB6m0+RRJpOhffv2iIiIUC1TKpWIiIhAcHCwDiMjIiIiIiKiB+m82+rLL7+M8PBwBAYGokOHDli2bBlycnJUo68SERERERGR7uk8eRwzZgySk5OxYMECJCYmok2bNti2bVuZQXSIiIiIiIhId3SePALA7NmzMXv2bF2HQURERERERBXQ6TOPREREREREVD8weSQiIiIiIqIqMXkkIiIiIiKiKjF5JCIiIiIi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GDdunDA1NRXm5uZi8uTJIisrSwevpvaUV0YAxNq1a1Xb5OXliZkzZworKythbGwshg0bJhISEtSOExsbKwYMGCCMjIyEra2tmDNnjigqKnrMr6Z2Pf3008Ld3V3IZDLRpEkTERoaqkochWA5Paix1z9jxowRjo6OQiaTCWdnZzFmzBhx7do11XpNrpWGgPVw+Sorl9zcXNG3b1/RpEkTYWBgINzd3cXUqVPLJDsNsVxqS0Oqjxpq3dJY6orG8t5vSJ8tJfdfEBEREREREVGFGsUzj0RERERERPRomDwSERERERFRlZg8EhERERERUZWYPBIREREREVGVmDwSERERERFRlZg8EhERERERUZWYPBIREREREVGVmDwSERERERFRlZg8UoMRGxsLiUSCM2fOPNJxPDw8sGzZshqJiYjql71790IikSA9Pf2RjlPT9UiPHj3w4osv1tjxiKhxqapuq6nPUNTwMXkkIqJGi0kZET1OrHOovmPySERERERERFVi8kj1jlKpxIcffggfHx/I5XK4ubnh3XffVa2/ceMGevbsCWNjYwQEBODIkSNq+//xxx9o0aIF5HI5PDw88Mknnzzul0BEdcCkSZOwb98+fPbZZ5BIJJBIJIiNjQUAREZGIjAwEMbGxujcuTMuX76s2u/69esYMmQI7O3tYWpqiqCgIOzatavScy1duhStWrWCiYkJXF1dMXPmTGRnZ6ttc+jQIfTo0QPGxsawsrJCv379kJaWplqvVCrx6quvwtraGg4ODli0aFGNlQUR1b7y6px169ZBIpHg33//RevWrWFoaIhOnTrh/PnzavsePHgQXbt2hZGREVxdXfH8888jJydHtf6HH35AYGAgzMzM4ODggPHjx+Pu3bsVxpKbm4sBAwYgJCRErStrdHQ0OnfuDENDQ7Rs2RL79u1TrSvt+lpZrDdv3kRYWBisrKxgYmKCFi1aYMuWLTVQelRXMHmkemfevHn44IMPMH/+fFy8eBE///wz7O3tVevffPNNvPLKKzhz5gyaNm2KcePGobi4GEDJB8LRo0dj7NixOHfuHBYtWoT58+dj3bp1Ono1RKQrn332GYKDgzF16lQkJCQgISEBrq6uAErqkU8++QQnT56Evr4+nn76adV+2dnZGDhwICIiInD69Gn0798fYWFhiIuLq/BcUqkUy5cvx4ULF/Ddd99h9+7dePXVV1Xrz5w5g9DQUPj7++PIkSM4ePAgwsLCoFAoVNt89913MDExwbFjx/Dhhx/i7bffxs6dO2uhZIioNlRW58ydOxeffPIJTpw4gSZNmiAsLAxFRUUASm5Y9e/fHyNGjMDZs2fx22+/4eDBg5g9e7bq2EVFRfjf//6HqKgo/Pnnn4iNjcWkSZPKjSM9PR19+vSBUqnEzp07YWlpqVo3d+5czJkzB6dPn0ZwcDDCwsKQkpKitn9lsc6aNQsFBQXYv38/zp07hyVLlsDU1LQGS5F0ThDVI5mZmUIul4uvv/66zLqYmBgBQHzzzTeqZRcuXBAAxKVLl4QQQowfP1706dNHbb+5c+cKf39/1c/u7u7i008/rZ0XQER1Svfu3cULL7yg+nnPnj0CgNi1a5dq2b///isAiLy8vAqP06JFC/H555+rfq6qHtmwYYOwsbFR/Txu3DgREhJSaZxdunRRWxYUFCRee+21Cvchorqnojrn119/VS1LSUkRRkZG4rfffhNCCDFlyhTx7LPPqh3nwIEDQiqVVlgvnThxQgAQWVlZaue5dOmSaN26tRgxYoQoKChQbV/6GeqDDz5QLSsqKhIuLi5iyZIlGsfaqlUrsWjRouoUDdUTbHmkeuXSpUsoKChAaGhohdu0bt1a9b2joyMAqLpuXLp0CSEhIWrbh4SE4OrVq2p3+ImocausHsnOzsYrr7yC5s2bw9LSEqamprh06VKlLY+7du1CaGgonJ2dYWZmhqeeegopKSnIzc0F8F/Lo6YxlcZVWbc0Iqo/goODVd9bW1ujWbNmuHTpEgAgKioK69atg6mpqeqrX79+UCqViImJAVDSsyosLAxubm4wMzND9+7dAaBMvdSnTx/4+Pjgt99+g0wmqzQOfX19BAYGquLQJNbnn38e77zzDkJCQrBw4UKcPXv2UYqF6iAmj1SvGBkZVbmNgYGB6nuJRAKg5FkhIiJNVVaPvPLKK9i0aRPee+89HDhwAGfOnEGrVq1QWFhY7rFiY2MxaNAgtG7dGn/88QciIyOxYsUKAFDto23dVhoX6zaihi87OxvTpk3DmTNnVF9RUVG4evUqvL29kZOTg379+sHc3Bw//fQTTpw4gU2bNgFAmXrpiSeewP79+3Hx4sVaifWZZ57BjRs38NRTT+HcuXMIDAzE559/XivnIt1g8kj1iq+vL4yMjBAREVGt/Zs3b45Dhw6pLTt06BCaNm0KPT29mgiRiOoRmUymda+DQ4cOYdKkSRg2bBhatWoFBwcH1UA75YmMjIRSqcQnn3yCTp06oWnTpoiPj1fbpnXr1tWu14io/qiozjl69Kjq+7S0NFy5cgXNmzcHALRr1w4XL16Ej49PmS+ZTIbo6GikpKTggw8+QNeuXeHn51dhr4QPPvgA4eHhCA0NLTeBfDCO4uJiREZGquLQJFYAcHV1xfTp07Fx40bMmTMHX3/9tYalQ/WBvq4DINKGoaEhXnvtNbz66quQyWQICQlBcnIyLly4UGWXLwCYM2cOgoKC8L///Q9jxozBkSNH8MUXX+DLL798DNETUV3j4eGBY8eOITY2Fqamphq15Pn6+mLjxo0ICwuDRCLB/PnzK93Px8cHRUVF+PzzzxEWFoZDhw5h1apVatvMmzcPrVq1wsyZMzF9+nTIZDLs2bMHo0aNgq2t7SO/TiKqGyqqc95++23Y2NjA3t4eb775JmxtbTF06FAAwGuvvYZOnTph9uzZeOaZZ2BiYoKLFy9i586d+OKLL+Dm5gaZTIbPP/8c06dPx/nz5/G///2vwhg+/vhjKBQK9OrVC3v37oWfn59q3YoVK+Dr64vmzZvj008/RVpamtqAYVXF+uKLL2LAgAFo2rQp0tLSsGfPnjLJJ9VvbHmkemf+/PmYM2cOFixYgObNm+P/7d15XFT14v/x97CjAm6ooCh6wdRM3NLc0hQ17WupdbOyUjPL0ptL5VI/Ne161cq0srQyNW+aldlipV73fcWt3HfccJdN9jm/P8hJBIOBgTPA6/l48Ig55zDzPif4OO85W48ePXJ83k/Dhg317bffasGCBapbt65Gjx6tcePG3fGKZACKttdee02urq6qU6eO/P39//a8xZvef/99lSlTRs2bN1eXLl3UsWNHNWzY8I7Lh4WF6f3339ekSZNUt25dzZs3TxMmTMiwTM2aNfW///1Pe/bsUZMmTdSsWTP99NNPcnPjM16gKLnTmDNx4kQNGjRIjRo1UlRUlBYvXmw7J7FevXpau3atDh8+rFatWqlBgwYaPXq0AgMDJUn+/v6aM2eOvvvuO9WpU0cTJ07Ue++997c5pkyZoscff1xt27bV4cOHbdMnTpyoiRMnKiwsTBs2bNDPP/+c6QOsv8ualpamAQMGqHbt2nrwwQdVs2ZNPqAvYiyGYRhmhwAAAACKmzVr1uiBBx7QtWvXMtwywxkVpqzIP+x5BAAAAABki/IIAAAAAMgWh60CAAAAALLFnkcAAAAAQLYojwAAAACAbFEeAQAAAADZojwCAAAAALJFeQQAAAAAZIvyCAAAAADIlpvZAfLCarXq3Llz8vHxkcViMTsOgELIMAzFxsYqMDBQLi45/zyN8QdAXuV2/Lkd4xGAvMrpeFSoy+O5c+cUFBRkdgwARcDp06dVpUqVHC/P+APAUewdf27HeATAUbIbjwp1efTx8ZGUvpK+vr4mpwFQGMXExCgoKMg2nuQU4w+AvMrt+HM7xiMAeZXT8ahQl8ebh2b4+voyWALIE3sP9WL8AeAoeT3UlPEIgKNkNx5xwRwAAAAAQLYojwAAAACAbFEeAQAAAADZojwCAAAAALJFeQQAAAAAZIvyCAAAAADIFuURAAAAAJAtyiMAAAAAIFuURwAAAABAtiiPAAAAAIBsUR4BAAAAANkytTxOnz5d9erVk6+vr3x9fdWsWTMtWbLEzEgAAAAAgCyYWh6rVKmiiRMnKiIiQjt27FDbtm31yCOPaN++fWbGAgAAAADcxs3MF+/SpUuGx+PHj9f06dO1ZcsW3X333SalAgAAAADcztTyeKu0tDR99913io+PV7NmzbJcJikpSUlJSbbHMTExBRUPQDHH+APAWTAeATCL6RfM+f3331WqVCl5enqqf//++uGHH1SnTp0sl50wYYL8/PxsX0FBQQWcFkBxxfgDwFkwHgEwi8UwDMPMAMnJyYqMjFR0dLQWLlyomTNnau3atVkWyKw+aQsKClJ0dLR8fX0LMjaAIiImJkZ+fn7ZjiOMPwAcLafjz+0YjwA4Wk7HI9MPW/Xw8FBISIgkqVGjRtq+fbs++OADffrpp5mW9fT0lKenZ0FHBADGHwBOg/EIgFlMP2z1dlarNcOnaQAAAAAA85m653HkyJHq1KmTqlatqtjYWM2fP19r1qzRsmXLzIwFAAAAALiNqeXx4sWLevbZZ3X+/Hn5+fmpXr16WrZsmdq3b29mLAAAAADAbUwtj1988YWZLw8AAAAAyCGnO+cRAAAAAOB8KI8AAAAAgGxRHgEAAAAA2aI8AgAAAACyRXkEAAAAAGSL8ggAAAAAyBblEQAAAACQrVyVx9TUVK1YsUKffvqpYmNjJUnnzp1TXFycQ8MBAAAAAJyDm70/cOrUKT344IOKjIxUUlKS2rdvLx8fH02aNElJSUmaMWNGfuQEAAAAAJjI7j2PgwYNUuPGjXXt2jV5e3vbpnfr1k0rV650aDgAAAAAgHOwe8/j+vXrtWnTJnl4eGSYHhwcrLNnzzosGAAAAADAedi959FqtSotLS3T9DNnzsjHx8choQAAAAAAzsXu8tihQwdNnTrV9thisSguLk5jxoxR586dHZkNAAAAAOAk7D5sdfLkyerYsaPq1KmjxMREPfXUUzpy5IjKly+vr7/+Oj8yAgAAAABMZnd5rFKlivbs2aNvvvlGe/bsUVxcnPr27auePXtmuIAOAAAAAKDosLs8SpKbm5t69uypnj17OjoPAAAAAMAJ2X3O44QJEzRr1qxM02fNmqVJkyY5JBQAAAAAwLnYXR4//fRT1apVK9P0u+++WzNmzHBIKAAAAACAc7G7PEZFRSkgICDTdH9/f50/f94hoQAAAAAAzsXu8hgUFKSNGzdmmr5x40YFBgY6JBQAAAAAwLnYfcGcfv36afDgwUpJSVHbtm0lSStXrtSwYcP06quvOjwgAAAAAMB8dpfH119/XVeuXNHLL7+s5ORkSZKXl5eGDx+ukSNHOjwgAAAAAMB8dpdHi8WiSZMmadSoUTpw4IC8vb0VGhoqT0/P/MgHAAAAAHACubrPoySVKlVK9957ryOzAAAAAACclN3lMT4+XhMnTtTKlSt18eJFWa3WDPOPHz/usHAAAAAAAOdgd3l8/vnntXbtWj3zzDMKCAiQxWLJj1wAAAAAACdid3lcsmSJfv31V7Vo0SI/8gAAAAAAnJDd93ksU6aMypYtmx9ZAAAAAABOyu7y+Pbbb2v06NG6ceNGfuQBAAAAADghuw9bnTx5so4dO6aKFSsqODhY7u7uGebv3LnTYeEAAAAAAM7B7vLYtWvXfIgBAAAAAHBmdpfHMWPG5EcOAAAAAIATs/ucR0m6fv26Zs6cqZEjR+rq1auS0g9XPXv2rEPDAQAAAACcg917Hvfu3avw8HD5+fnp5MmT6tevn8qWLatFixYpMjJSc+fOzY+cAAAAAAAT2b3ncejQoerdu7eOHDkiLy8v2/TOnTtr3bp1Dg0HAAAAAHAOdpfH7du368UXX8w0vXLlyoqKinJIKAAAAACAc7G7PHp6eiomJibT9MOHD8vf398hoQAAAAAAzsXu8vjwww9r3LhxSklJkSRZLBZFRkZq+PDhevTRRx0eEAAAAABgPrvL4+TJkxUXF6cKFSooISFBrVu3VkhIiHx8fDR+/Hi7nmvChAm699575ePjowoVKqhr1646dOiQvZEAAAAAAPnM7qut+vn5afny5dqwYYP27t2ruLg4NWzYUOHh4Xa/+Nq1azVgwADde++9Sk1N1RtvvKEOHTpo//79KlmypN3PBwAAAADIH3aXx5tatmypli1b5unFly5dmuHxnDlzVKFCBUVEROj+++/P03MDAAAAABwnR+Xxww8/zPETvvLKK7kOEx0dLUkqW7ZslvOTkpKUlJRke5zVhXsAID8w/gBwFoxHAMySo/I4ZcqUDI8vXbqkGzduqHTp0pKk69evq0SJEqpQoUKuy6PVatXgwYPVokUL1a1bN8tlJkyYoLFjx+bq+QEgLxh/ADgLxiMAZrEYhmHY8wPz58/XJ598oi+++EJ33XWXJOnQoUPq16+fXnzxRfXs2TNXQV566SUtWbJEGzZsUJUqVbJcJqtP2oKCghQdHS1fX99cvS6A4i0mJkZ+fn7ZjiOMPwAcLafjz+0YjwA4Wk7HI7vPeRw1apQWLlxoK46SdNddd2nKlCl67LHHclUeBw4cqF9++UXr1q27Y3GU0u8x6enpaffzA0BeMf4AcBaMRwDMYnd5PH/+vFJTUzNNT0tL04ULF+x6LsMw9K9//Us//PCD1qxZo+rVq9sbBwAAAABQAOy+z2O7du304osvaufOnbZpEREReumll+y+XceAAQP01Vdfaf78+fLx8VFUVJSioqKUkJBgbywAAAAAQD6yuzzOmjVLlSpVUuPGjW2HTTRp0kQVK1bUzJkz7Xqu6dOnKzo6Wm3atFFAQIDt65tvvrE3FgAAAAAgH9l92Kq/v79+++03HT58WAcPHpQk1apVSzVr1rT7xe28Vg8A/K34pFQt2xclVxeLHqlf2ew4AAAARYrd5fGmmjVr5qowAoAjWa2Gthy/ou93ntWSP87rRnKagsuV0MNhgbJYLGbHAwAAKDLsLo9paWmaM2eOVq5cqYsXL8pqtWaYv2rVKoeFA4A7OXYpTot2ntEPO8/qXHSibXpwuRLq3rCKktOs8nRzNTEhAABA0WJ3eRw0aJDmzJmjhx56SHXr1uWTfQAF5vqNZC3ee17fR5zR7tPXbdN9vNz0f/UC9VijympYtQzjEgAAQD6wuzwuWLBA3377rTp37pwfeQAgg5Q0q9YcuqRFO89o5YGLSk5LP9rB1cWi1jX91b1hZYXXrigvd/YyAgAA5Ce7y6OHh4dCQkLyIwsASEq/mNa+czH6fucZ/bz7nK7EJ9vm1arko8caVdHD9QNVwcfLxJQAAADFi93l8dVXX9UHH3ygadOmcWgYAIe6GJOoH3ef1fcRZ3XoQqxtevlSHnqkfmU92rCK6gT6mpgQAACg+LK7PG7YsEGrV6/WkiVLdPfdd8vd3T3D/EWLFjksHICiLzElTcv3X9D3O89o3eFLsv55Bx8PVxe1r1NRjzaqrPtD/eXmavdtaQEAAOBAdpfH0qVLq1u3bvmRBUAxYRiGdkZe08KIs/pl7znFJqba5jWsWlrdG1ZRl3qB8ivh/jfPAgAAgIJkd3mcPXt2fuQAUAycuXZDP+w8q0W7zurE5Xjb9EA/L3VvWEXdG1ZWDf9SJiYEAADAndhdHiUpNTVVa9as0bFjx/TUU0/Jx8dH586dk6+vr0qV4o0fgL8kpqRpyR/n9d2OM9p07Ipture7qzrdU0mPNayi+2qUk4sL51ADAAA4M7vL46lTp/Tggw8qMjJSSUlJat++vXx8fDRp0iQlJSVpxowZ+ZETQCHzx9loLdgeqZ92ZzwstVmNcnq0URV1qltJJT1z9fkVAAAATGD3O7dBgwapcePG2rNnj8qVK2eb3q1bN/Xr18+h4QAULtE3UvTj7rP6Zvtp7T8fY5teubS3Hm8cpO4NKyuobAkTEwIAACC37C6P69ev16ZNm+Th4ZFhenBwsM6ePeuwYAAKB6vV0ObjV/TN9tNaui9KyalWSelXS+1Yt5J6NA5S839wWCoAAEBhZ3d5tFqtSktLyzT9zJkz8vHxcUgoAM7vfHSCFu44o28jTuv01QTb9NoBvurRuIq6Nqis0iU8/uYZAAAAUJjYXR47dOigqVOn6rPPPpMkWSwWxcXFacyYMercubPDAwJwHilpVq08cFELtkdmuCejj6ebHq4fqCfuraq6lX1lsbCXEQAAoKixuzxOnjxZHTt2VJ06dZSYmKinnnpKR44cUfny5fX111/nR0YAJjt99YYWbI/UtzvO6FJskm160+pl1ePeIHWqGyBvD1cTEwIAACC/2V0eq1Spoj179mjBggXau3ev4uLi1LdvX/Xs2VPe3t75kRGACVLSrFqx/4Lmb4vU+iOXbdPLl/LUY42q6Il7gxRcvqSJCQEAAFCQcnWdfDc3Nz399NOOzgLACZy8HK8F209rYcQZXY77ay9jq9Dy6tm0qtrVrih3VxcTEwIAAMAMuSqPhw4d0kcffaQDBw5IkmrXrq2BAweqVq1aDg0HoGAkp1r1v/1R+npbpDYevWKb7u/jqccbV9ET91blFhsAAADFnN3l8fvvv9cTTzyhxo0bq1mzZpKkLVu26J577tGCBQv06KOPOjwkgPxx8nK8vt4WqYURZ3QlPlmSZLFI94f666mmVdW2VgX2MgIAAEBSLsrjsGHDNHLkSI0bNy7D9DFjxmjYsGGUR8DJ3TyXcd7WSG04+te5jBV9PfV44yA93jiIvYwAAADIxO7yeP78eT377LOZpj/99NN69913HRIKgOOdvZ6gBdsitWD7adsVUy0WqXVNfz3VJH0voxt7GQEAAHAHdpfHNm3aaP369QoJCckwfcOGDWrVqpXDggHIuzSroTWHLmr+1kitPnTRdl/G8qU81eNezmUEAABAztldHh9++GENHz5cERERuu+++ySln/P43XffaezYsfr5558zLAug4F2MSdQ3209rwfbTOns9wTa9RUg59WxaTeG1K8rDjb2MAAAAyDmLYRiGPT/g4pKzN5wWi0VpaWm5CpVTMTEx8vPzU3R0tHx9ffP1tQBnZ7Ua2nTsiuZtPaXl+y8o9c/djKVLuOufjaroySZVVcO/lMkpnU9uxxHGHwB55ahxhPEIQF7ldByxe8+j1WrNUzAAjhWbmKLvI85o7uZTOn453ja9cbUy6nlfVXWqGyAvd1cTEwIAADi34BG/mh3BoU5OfChfnjdX93m8KTExUV5eXo7KAsAOxy/Fae7mU1oYcUZxSamSJB9PN3VvWFlPNa2muyr5mJwQAAAARYnd5TEtLU3/+c9/NGPGDF24cEGHDx9WjRo1NGrUKAUHB6tv3775kROA0g9NXXvkkuZsPKm1hy/Zpv/Dv6R6Nw9W94ZVVNIzT58JIZ9sOX5FX205pdIl3FXa20OlS7jLz9tdpUt4/DnNXX5/TvN0Y08xAABwPna/yxw/fry+/PJLvfPOO+rXr59tet26dTV16lTKI5APYhNTtPDPQ1NP/HloqsUitatVQb2aB6tlSHlZLBaTU+LvHLkQq1/2ns/RsiU8XP8skx7p//V2Ty+bNwvnLeXTNs/bXaU83fg9AAAA+cbu8jh37lx99tlnateunfr372+bHhYWpoMHDzo0HFDcHbsUp7mbTmphxBnFJ6dfgMrHy009GgfpmWbVVK1cSZMTIqcaB5fV6P+ro+sJKYq+kazrCSm6fiMlw+PohBQZhnQjOU03ktN0LjrRrtdwc7GkF8pbiuXfft2ynLe7K8UTAAD8LbvL49mzZzPd41FKv5BOSkqKQ0IBxZlhGFp7+JJm33ZoakiFUurVPFjdG1Tm0NRCqHaAr2oH/P1VEK1WQ7FJqYq+kaLrCcm6fiNF124kK+bPohmdkGIrndEJyemP/yygyalWpVoNXYlP1pX4ZLvzebi6yNfbXX7eblkWTV+KJwAAxZ7d70Dr1Kmj9evXq1q1ahmmL1y4UA0aNHBYMKC4SUxJ00+7z2rm+hM6cjFO0s1DUyuqd/NgtQgpxxv0Is7l5p5Db3dVVQm7fjYxJe3PIplsK5rRCSmK+fO/t067dXp0QopSrYaS06y6HJeky3FJdud2d7XI1ytjyby9iN6cf/syPp5ucnHh9xoAgMLA7vI4evRo9erVS2fPnpXVatWiRYt06NAhzZ07V7/88kt+ZASKtKvxyfrv5lP675aTuhyXvseolKebetwbpF7NglW1nH0lAsWTl7urKvm5qpKffVfANgxD8clp6UUyi9KZ1dftxTMlLfd7PC2W9N/3v8qnW4Yimv69222l9K8vbkMDAEDBsbs8PvLII1q8eLHGjRunkiVLavTo0WrYsKEWL16s9u3b50dGoEg6dilOX2w4oe8jzigpNf3+qYF+XurTorp6NAmSr5e7yQlRHFgsFpXydFMpTzdVLu1t188ahqEbfxbPmMTbymdiaoaieXsZjUlMUWKKVYYhxSamKjYxVWevJ9id38PNxVYw73SIra/XbdNKuMvXy40LDAEAYKdcnTjVqlUrLV++3NFZgCLPMAxtPXFVM9cf14oDF23T61Xx0/OtaqhT3Upyd3UxMSGQcxaLRSU93VTS002Bsq94SlJSappiElIVk3hLybyldN6cHpOQ+ldBvaWMWg0pOTX3h9u6uljk6+WWxeG2tx9m65Zpmo+Xm9z4WwUAFDNcdQMoAClpVv32+3nNXH9Cv5+NlvTX+Yz9WlVXk+pl2QOCYsfTzVX+Pq7y9/G0+2etVkPxyam3lMmMpfNOh9lGJ6QqJiFFyWlWpVkNXbuRoms3cnext/TDbe98SK2vl5vtwkK3n/PJ4bYAgMIoR+WxTJkyOX5je/Xq1TwFAoqSuKRULdgWqVkbTthuu+Dp5qLHGlVR35bVVcO/lMkJgcLJxcUiHy93+Xi5q0oZ+37WMAwlpVr/pmBm3tsZc8syN2+bE5eUqrikVLtvqSKlH257p1uo3FpIubotAMCZ5Kg8Tp061fb9lStX9O9//1sdO3ZUs2bNJEmbN2/WsmXLNGrUqHwJCRQ2V+OTNWfTSX256aSiE9L3apQv5aFnmwXr6fuqqWxJD5MTAsWXxWKRl7urvNxdVdHXvgsMSelHEsTedk7nredy3j79ZhG9Od/483DbS7FJuhSbu6vbZnUup+9tt1nJ6gq4XN0WAJAXOSqPvXr1sn3/6KOPaty4cRo4cKBt2iuvvKJp06ZpxYoVGjJkSI5ffN26dXr33XcVERGh8+fP64cfflDXrl1znh5wMueuJ+jz9ce1YNtpJaSk752oUb6kXri/hro2qMyhakAR4O7qorIlPXL1IZDVaiguOdV2caGYLIrnzcNrb90renO5m1e3vRyXbLs6sz0sFsnH0+2WK9lmPKfT95YimuGxV/o09noCRU/wiF/NjuBwJyc+ZHaEIsvucx6XLVumSZMmZZr+4IMPasSIEXY9V3x8vMLCwvTcc8+pe/fu9kYBnMaxS3GaseaYftx9VilphiSpbmVfvdwmRB3vriRXPukHoPTDbX290stYkJ0/e+vVbbPe65ma5S1Wbp4HevPqtjGJqYpJTJVk/9Vt3VwsfxbPvwrorUXzztMpnwBQFNhdHsuVK6effvpJr776aobpP/30k8qVK2fXc3Xq1EmdOnWyNwLgNH4/E61P1hzV0n1RMtI7o+6rUVYvtwlRq9DyvEkC4DAZrm5r521VpL+ubpvpXM4/S2fMbXtAY29O//MQ3TSroVSroavxybqai3t6SpnLp4+Xm3w8//yv183/ppfO26fd/N7TzYWxFQBMYnd5HDt2rJ5//nmtWbNGTZs2lSRt3bpVS5cu1eeff+7wgLdKSkpSUtJf54fExMTk6+sBWTEMQ5uPX9H0Nce0/shl2/Tw2hX18gP/UMOqdl69A4UC4w8Ku7xc3dYwDCWkZLy1Svp/M95qJTYxNdP0m+U01QHlU5I8XF1U6s/7dJbydFMpLzf5/PnfDI893VTKy12lPNPLZ0lPN5XydP3zv24q6VF4z/9kPAJgFrvLY+/evVW7dm19+OGHWrRokSSpdu3a2rBhg61M5pcJEyZo7Nix+foawJ1YrYZWHLigj9cc057T1yWl3yfukbBAvdj6H7qrko+5AZGvGH9QnFksFpXwcFMJDzdV8rP/IkN/Vz5jE9MLZmxi+vc3/xuXdHNa+s/EJaWmX2wozZrnAnpTCY9byqSnq0p63Pw+vYSWvGV+CY+/lrFN83T9c55rgZZRxiMAZrEYxs2D7cxlsViyvWBOVp+0BQUFKTo6Wr6+vgWQEsVRmtXQb7+f18erj+pgVKyk9Ntt9Lg3SP1a1VBQ2RImJ0RexMTEyM/PL9txhPEHMNfNe3vGJqbaimVcUqriElMVl5SS4bFtmaRUxf1ZPOOT0hSbmH6rlTRr/rz18XZ3VXD5kloyqFWOls/p+HM7xiM4EhfMSVfUtoO92yCn45Hdex7N5OnpKU9P+w+3AXIjJc2qn3af0yerj+r45XhJ6TcFf6ZZNT3XonquDv1C4cX4A5jr1nt75sXN+3ymF8pUW7GM/7Nsxt8y/UZymm25m8vcSM4872YXTUhJU9KfV9rOT4xHAMxSqMojUBCSUtP0fcRZTV97VKevpl+N0M/bXX1bVlevZsHyK5G3Ny4AAPPcep/P8qXyXsBuLaM3ktKUarU6ICUAOCdTy2NcXJyOHj1qe3zixAnt3r1bZcuWVdWqVU1MhuIoITlNC7ZH6tO1xxUVkyhJKl/KQ8+3qqGn76umUp581gIAyOjWMqpSZqcBgPxl6rvhHTt26IEHHrA9Hjp0qCSpV69emjNnjkmpUNzEJaXqqy2nNHP9cdtNtyv5eunF1jX0xL1V5e3hanJCAAAAwHymlsc2bdrISa7Xg2IoOiFFX246qVkbT+j6jRRJUpUy3nqpzT/0WKMq8nSjNAIAAAA35ag8du/ePcdPePP2HYCzir6Roi82HNfsjScVm5QqSapRvqRefiBEj9QPlLuri8kJAQAAAOeTo/Lo5+eX3zmAfHf9RrJmbTiRoTTeVdFHA9qG6KF7AuRaSG8WDQAAcqe4354BsFeOyuPs2bPzOweQb7IqjbUq+WhQu1B1vLtSgd3UGQAAACjMuHwkiqzrN5L1xZ+lMe6W0jg4PFQd6lAaAQAAAHvkqjwuXLhQ3377rSIjI5WcnJxh3s6dOx0SDMgtSiMAAADgeHZfGeTDDz9Unz59VLFiRe3atUtNmjRRuXLldPz4cXXq1Ck/MgI5cv1Gsib/75BaTlqtj1YdVVxSqmpV8tGMpxvpt1da6cG6ARRHAAAAIJfs3vP4ySef6LPPPtOTTz6pOXPmaNiwYapRo4ZGjx6tq1ev5kdG4G/deU9jTXWoU5HCCAAAADiA3eUxMjJSzZs3lyR5e3srNjZWkvTMM8/ovvvu07Rp0xybELiD6ISU9NK44YTtQji1A3w1qF0opREAAABwMLvLY6VKlXT16lVVq1ZNVatW1ZYtWxQWFqYTJ07IMIz8yAhkEJOYotkbTmrmhuOKTWRPIwAAAFAQ7C6Pbdu21c8//6wGDRqoT58+GjJkiBYuXKgdO3aoe/fu+ZERkCTFJaXqy00n9dm644pOSJEk1axYSkPCa3LLDQAAACCf2V0eP/vsM1mtVknSgAEDVK5cOW3atEkPP/ywXnzxRYcHBOKTUjV38yl9tu6Yrt1IL40hFUppcHioOnMRHAAAAKBA2F0eXVxc5OLy10Van3jiCT3xxBMODQVIUkJymr7ackoz1h7Tlfj0W8LUKF9Sg8JD9X/1AuVKaQQAAAAKTI7K4969e1W3bl25uLho7969f7tsvXr1HBIMxVdiSprmbY3U9DXHdDkuSZJUrVwJDWoXqofDAuXmavcdZgAAAADkUY7KY/369RUVFaUKFSqofv36slgsWV4cx2KxKC0tzeEhUTwkpqRpwbZIfbLmmC7GppfGoLLeeqVtqLo1qExpBADAQYJH/Gp2BIc6OfEhsyMAxUKOyuOJEyfk7+9v+x5wpMSUNH29LX1P483SWLm0t/7VNkSPNqoid0ojAAAAYLoclcdq1arZvj916pSaN28uN7eMP5qamqpNmzZlWBb4O3cqjS8/8A/9s1GQPNwojQAAAICzsPuCOQ888IDOnz+vChUqZJgeHR2tBx54gMNWka3ElDTN3xqp6WuP6dItpXHAAyF6rFEVSiMAAADghOwuj4ZhyGLJfJXLK1euqGTJkg4JhaKJ0ggAAAAUXjkuj927d5eUflGc3r17y9PT0zYvLS1Ne/fuVfPmzR2fEIXezaunzqA0AgAAAIVWjsujn5+fpPQ9jz4+PvL29rbN8/Dw0H333ad+/fo5PiEKrYTkNM3flrk0DmwbokcbUhoBAACAwiTH5XH27Nm223N89NFHKlWqVL6FQuEWl5Sqr7ac0sz1x3U5LlkSpREAAAAo7Ow659EwDM2bN09vvPGGQkND8ysTCqmYxBR9ufGkvth4QtdvpEiiNAIAAABFhV3l0cXFRaGhobpy5QrlETbX4pM1a+MJzdl0UrGJqZKk6uVL6uU2/1DXBpW5TyMAAABQBNh9tdWJEyfq9ddf1/Tp01W3bt38yIRC4lJskmauP67/bjmlG8npt2gJrVBKA9uG6P/qBcrVJfNVeQEAAAAUTnaXx2effVY3btxQWFiYPDw8Mlw4R5KuXr3qsHBwTlHRifp03TF9vS1SiSlWSVKdAF/9q22IOt5dSS6URgAAAKDIsbs8Tp06NR9ioDA4c+2Gpq85pu92nFFyWnppDAsqrVfahqhtrQpZ3v8TAAAAQNFgd3ns1atXfuSAEztxOV7T1xzVop1nlWpNv+Juk+Cy+le7ELUMKU9pBAAAAIoBu8vjrRITE5WcnJxhmq+vb54CwXkcvhCrj1cf1eI95/RnZ1TLkPIa2DZE99UoZ244AAAAAAXK7vIYHx+v4cOH69tvv9WVK1cyzU9LS3NIMJjnj7PRmrbqqJbui7JNa1ergga0DVHDqmVMTAYAAADALHaXx2HDhmn16tWaPn26nnnmGX388cc6e/asPv30U02cODE/MqKARJy6pmmrjmj1oUuSJItF6lS3kl5uE6K6lf1MTgcAAADATHaXx8WLF2vu3Llq06aN+vTpo1atWikkJETVqlXTvHnz1LNnz/zIiXxiGIY2H7+iaauOatOx9D3JLhbpkfqV9XKbfyi0oo/JCQEAAAA4A7vL49WrV1WjRg1J6ec33rw1R8uWLfXSSy85Nh3yjWEYWnP4kqatOqqIU9ckSW4uFj3asIpeavMPBZcvaXJCAAAAAM7E7vJYo0YNnThxQlWrVlWtWrX07bffqkmTJlq8eLFKly6dDxHhSFarof/tv6CPVx/V72ejJUkebi564t4gvdj6H6pc2jubZwAAAABQHNldHvv06aM9e/aodevWGjFihLp06aJp06YpJSVF77//fn5khAOkplm1eO85fbL6mI5cjJMkebu76un7qqpfqxqq4OtlckIAAAAAzszu8jhkyBDb9+Hh4Tp48KAiIiIUEhKievXqOTQc8i4pNU3fR5zVjLXHFHn1hiTJx9NNvZoH67mW1VW2pIfJCQEAAAAUBjkuj1arVe+++65+/vlnJScnq127dhozZoyqVaumatWq5WdG5MKN5FTN3xqpz9cf14WYJElS2ZIe6tuyup5pVk2+Xu4mJwQAAABQmOS4PI4fP15vvfWWwsPD5e3trQ8++EAXL17UrFmz8jMf7BSdkKL/bj6pWRtP6mp8siSpkq+XXri/hp5sUlXeHq4mJwQAAABQGOW4PM6dO1effPKJXnzxRUnSihUr9NBDD2nmzJlycXHJt4DImStxSZq18YTmbjql2KRUSVLVsiX0Upt/qHvDyvJ0ozQCAAAAyL0ct77IyEh17tzZ9jg8PFwWi0Xnzp3Lc4iPP/5YwcHB8vLyUtOmTbVt27Y8P2dxERWdqLGL96nFpFX6ePUxxSalKrRCKU3tUV+rXm2tJ5tUpTgCAAAAyLMc73lMTU2Vl1fGK3K6u7srJSUlTwG++eYbDR06VDNmzFDTpk01depUdezYUYcOHVKFChXy9NxF2emrNzR97TEt3HFGyWlWSVK9Kn4a8ECI2teuKBcXi8kJAQAAABQlOS6PhmGod+/e8vT0tE1LTExU//79VbLkXzeUX7RokV0B3n//ffXr1099+vSRJM2YMUO//vqrZs2apREjRtj1XMXBycvx+nj1Uf2w66xSrYYkqUlwWQ1sG6JWoeVlsVAaAQAAADhejstjr169Mk17+umn8/TiycnJioiI0MiRI23TXFxcFB4ers2bN2daPikpSUlJSbbHMTExeXr9wuToxVhNW3VUP+85pz87o1qGlNe/2oaoaY1y5oYDioHiPP4AcC6MRwDMkuPyOHv2bIe/+OXLl5WWlqaKFStmmF6xYkUdPHgw0/ITJkzQ2LFjHZ7DmR04H6Npq47qtz/Oy/izND5wl78Gtg1Vo2plzA0HFCPFcfwB4JwcMR6dnPiQg9IUbmwHtsFNbIecKVSXSR05cqSio6NtX6dPnzY7Ur75/Uy0+s3doU4frNevv6cXx453V9TigS01u08TiiNQwIrT+APAuTEeATBLjvc85ofy5cvL1dVVFy5cyDD9woULqlSpUqblPT09M5xzWRRFnLqmj1Yd0ZpDlyRJFovU+Z4A/attiGpV8jU5HVB8FYfxB0DhwHgEwCymlkcPDw81atRIK1euVNeuXSVJVqtVK1eu1MCBA82MVuC2n7yqqSsOa+PRK5IkVxeLHgkL1MsPhCikQimT0wEAAAAo7kwtj5I0dOhQ9erVS40bN1aTJk00depUxcfH266+WtRFnLqqKcuPaMPRy5IkNxeLHm1YRS8/8A9VK1cym58GAAAAgIJhenns0aOHLl26pNGjRysqKkr169fX0qVLM11Ep6jZGXlNU5Yf1vojf5XGfzauopfbhCiobAmT0wEAAABARqaXR0kaOHBgsTlMdffp65qy/LDWHk4/p9HVxaLHGlbRwLaURgAAAADOyynKY3Gw90x6aVx96K/S2L1BZf2rbaiqlqM0AgAAAHBulMd89vuZaE1dcVgrD16UJLlYpG4NquhfbUMUXJ5zGgEAAAAUDpTHfPLH2WhNXXFEKw6k34bExSJ1rV9Z/2oXquqURgAAAACFDOXRwQ5FxWrK8sNaui9KUnppfDgsUP9qF6p/+HPLDQAAAACFE+XRQY5ditPUFUf0y95zMgzJYpG61AvUK+1CuU8jAAAAgEKP8phHkVdu6IOVR/TDrjOyGunTOt9TSYPDa6pmRR9zwwEAAACAg1Aec+ns9QRNW3VE3+04o9Q/W2N47Qoa0r6m7g70MzkdAAAAADgW5dFOF2MS9fHqo/p622klp1klSffX9NfQ9jVVP6i0ueEAAAAAIJ9QHnPoclySZqw5pv9uOaWk1PTS2KxGOQ3tUFP3Bpc1OR0AAAAA5C/KYzauxSfr8/XHNWfTSd1ITpMkNapWRq+2r6nmIeVNTgcAAAAABYPyeAfRN1I0c8Nxzd54UnFJqZKkelX8NLR9TbWu6S+LxWJyQgAAAAAoOJTH28QkpmjWhhP6Yv0Jxf5ZGmsH+GpIeKja16lIaQQAAABQLFEe/xSbmKI5G0/q8/XHFZOYXhprVfLR4PBQdahTSS4ulEYAAAAAxZeL2QHMFpeUqo9XH1Wrd1Zr8vLDiklMVWiFUvr4qYb67ZVWerBuAMUR+S4+Pl4Wi0UWi0Xx8fEOXz47J06csD3fiRMn8uX1L168aPuZixcv5jWyw7dBUWbmtiqqr53X5yZb/vw+MC4AQP4qtnsebySnau7mU/ps3XFdjU+WJNXwL6nB4TX10D0BcqUwAgAAAIBNsSuPCclp+mrLKX267pgux6WXxurlS2pQu1B1CQukNAIAAABAFopVefw+4owmLDmoy3FJkqSqZUvolXah6lo/UG6uxf4IXgAAAAC4o2JVHpPTrLocl6QqZbz1SttQdWtYWe6URgAAAADIVrEqj481qiJ3Vxc9HBYoDzdKIwAAAADkVLEqj+6uLnqsURWzYwAAAABAocPuNwAAAABAtiiPAAAAAIBsFerDVg3DkCTFxMSYnATIm1tvZh0TE6O0tDSHLp+d2NjYDN9n9zeVm9e//TW8vLxykTRvGbJyc11vjic5VZjGH0f/vvDaeX9usuXP74OZv2+5kdvx53aFaTwC4JxyOh5ZjLyOWCY6c+aMgoKCzI4BoAg4ffq0qlTJ+TnRjD8AHMXe8ed2jEcAHCW78ahQl0er1apz587Jx8dHFoslRz8TExOjoKAgnT59Wr6+vvmcMH8UhXWQWA9nU1zXwzAMxcbGKjAwUC4uOT+SPzfjT34qKv//ChrbLXfYbrlz+3bL7fhzO2cbj27i9yQd24FtcJMzb4ecjkeF+rBVFxeXXH9S5+vr63T/0+xVFNZBYj2cTXFcDz8/P7ufPy/jT34qKv//ChrbLXfYbrlz63bLzfhzO2cdj27i9yQd24FtcJOzboecjEdcMAcAAAAAkC3KIwAAAAAgW8WuPHp6emrMmDHy9PQ0O0quFYV1kFgPZ8N6FG7Fdb3ziu2WO2y33Clu2624re+dsB3YBjcVhe1QqC+YAwAAAAAoGMVuzyMAAAAAwH6URwAAAABAtiiPAAAAAIBsUR4BAAAAANkqVuXx448/VnBwsLy8vNS0aVNt27bN7Eh/a8KECbr33nvl4+OjChUqqGvXrjp06FCGZRITEzVgwACVK1dOpUqV0qOPPqoLFy6YlDh7EydOlMVi0eDBg23TCss6nD17Vk8//bTKlSsnb29v3XPPPdqxY4dtvmEYGj16tAICAuTt7a3w8HAdOXLExMSZpaWladSoUapevbq8vb31j3/8Q2+//bZuvW6WM67HunXr1KVLFwUGBspisejHH3/MMD8nma9evaqePXvK19dXpUuXVt++fRUXF1eAa+F4hfnvqSC99dZbslgsGb5q1aplm882u7OiMO4VtODg4Ey/bxaLRQMGDJDE7xtQ3BX2a5UWm/L4zTffaOjQoRozZox27typsLAwdezYURcvXjQ72h2tXbtWAwYM0JYtW7R8+XKlpKSoQ4cOio+Pty0zZMgQLV68WN99953Wrl2rc+fOqXv37iamvrPt27fr008/Vb169TJMLwzrcO3aNbVo0ULu7u5asmSJ9u/fr8mTJ6tMmTK2Zd555x19+OGHmjFjhrZu3aqSJUuqY8eOSkxMNDF5RpMmTdL06dM1bdo0HThwQJMmTdI777yjjz76yLaMM65HfHy8wsLC9PHHH2c5PyeZe/bsqX379mn58uX65ZdftG7dOr3wwgsFtQoOV5j/nsxw99136/z587avDRs22OaxzbJWVMa9grZ9+/YMv2vLly+XJP3zn/+UxO8bUNx5enrqwIEDZsfIPaOYaNKkiTFgwADb47S0NCMwMNCYMGGCiansc/HiRUOSsXbtWsMwDOP69euGu7u78d1339mWOXDggCHJ2Lx5s1kxsxQbG2uEhoYay5cvN1q3bm0MGjTIMIzCsw7Dhw83WrZsecf5VqvVqFSpkvHuu+/apl2/ft3w9PQ0vv7664KImCMPPfSQ8dxzz2WY1r17d6Nnz56GYRSO9ZBk/PDDD7bHOcm8f/9+Q5Kxfft22zJLliwxLBaLcfbs2QLL7iiF/e+poI0ZM8YICwvLch7b7M6KyrhntkGDBhn/+Mc/DKvVWux/3yIjI40+ffqYHSPf3bhxw1i/fr2xb9++TPMSEhKML7/80oRUBWv//v3GrFmzjAMHDhiGkf573r9/f6NPnz7GypUrTU5XMIYMGZLll4uLi/Hss8/aHhc2xWLPY3JysiIiIhQeHm6b5uLiovDwcG3evNnEZPaJjo6WJJUtW1aSFBERoZSUlAzrVatWLVWtWtXp1mvAgAF66KGHMmSVCs86/Pzzz2rcuLH++c9/qkKFCmrQoIE+//xz2/wTJ04oKioqw3r4+fmpadOmTrUezZs318qVK3X48GFJ0p49e7RhwwZ16tRJUuFZj1vlJPPmzZtVunRpNW7c2LZMeHi4XFxctHXr1gLPnFeF/e/JDEeOHFFgYKBq1Kihnj17KjIyUhLb7O8UlXHPTMnJyfrqq6/03HPPyWKxFPvft6tXr+rLL780O0a+Onz4sGrXrq37779f99xzj1q3bq3z58/b5kdHR6tPnz4mJsx/S5cuVf369fXaa6+pQYMGWrp0qe6//34dPXpUp06dUocOHbRq1SqzY+a7qVOnavXq1dq1a1eGL8MwdODAAe3atUu7d+82O6bd3MwOUBAuX76stLQ0VaxYMcP0ihUr6uDBgyalso/VatXgwYPVokUL1a1bV5IUFRUlDw8PlS5dOsOyFStWVFRUlAkps7ZgwQLt3LlT27dvzzSvsKzD8ePHNX36dA0dOlRvvPGGtm/frldeeUUeHh7q1auXLWtWv2POtB4jRoxQTEyMatWqJVdXV6WlpWn8+PHq2bOnJBWa9bhVTjJHRUWpQoUKGea7ubmpbNmyTrted1IU/p4KWtOmTTVnzhzdddddOn/+vMaOHatWrVrpjz/+YJv9jaIy7pnpxx9/1PXr19W7d29JRf9v9Oeff/7b+cePHy+gJOYZPny46tatqx07duj69eu2925r1qxR1apVzY5XIMaNG6fXX39d//73v7VgwQI99dRTeumllzR+/HhJ0siRIzVx4kS1bdvW5KT56z//+Y8+++wzTZ48OcO6uru7a86cOapTp46J6XKvWJTHomDAgAH6448/MpynUxicPn1agwYN0vLly+Xl5WV2nFyzWq1q3Lix/vOf/0iSGjRooD/++EMzZsxQr169TE6Xc99++63mzZun+fPn6+6779bu3bs1ePBgBQYGFqr1KK6Kyt9TQbu5Z12S6tWrp6ZNm6patWr69ttv5e3tbWIy51ZUxj0zffHFF+rUqZMCAwPNjlIgunbtKovF8rcXBLFYLAWYqOBt2rRJK1asUPny5VW+fHktXrxYL7/8slq1aqXVq1erZMmSZkfMd/v27dPcuXMlSY8//rieeeYZPfbYY7b5PXv21OzZs82KV2BGjBihdu3a6emnn1aXLl00YcIEubu7mx0rz4rFYavly5eXq6trpquZXbhwQZUqVTIpVc4NHDhQv/zyi1avXq0qVarYpleqVEnJycm6fv16huWdab0iIiJ08eJFNWzYUG5ubnJzc9PatWv14Ycfys3NTRUrVnT6dZCkgICATJ8Q1a5d23bo282szv479vrrr2vEiBF64okndM899+iZZ57RkCFDNGHCBEmFZz1ulZPMlSpVynRxrNTUVF29etVp1ysrReXvyWylS5dWzZo1dfTo0UIxjpqlqIx7Zjl16pRWrFih559/3jatqP++BQQEaNGiRbJarVl+7dy50+yI+S4hIUFubn/tm7FYLJo+fbq6dOmi1q1b204bKepufkjg4uIiLy8v+fn52eb5+PjYTsUq6u69915FRETo0qVLaty4sf74449C/wFKsSiPHh4eatSokVauXGmbZrVatXLlSjVr1szEZH/PMAwNHDhQP/zwg1atWqXq1atnmN+oUSO5u7tnWK9Dhw4pMjLSadarXbt2+v3337V7927bV+PGjdWzZ0/b986+DpLUokWLTLdJOXz4sKpVqyZJql69uipVqpRhPWJiYrR161anWo8bN27IxSXjn72rq6usVqukwrMet8pJ5mbNmun69euKiIiwLbNq1SpZrVY1bdq0wDPnVlH5ezJbXFycjh07poCAgEIxjpqlqIx7Zpk9e7YqVKighx56yDatqP++NWrUKMM4e7vs9koWBbVq1cpwO5ubpk2bpkceeUQPP/ywCakKVnBwcIZb9mzevDnDIbuRkZEKCAgwI5opSpUqpS+//FIjR45UeHi40tLSzI6UN+Zer6fgLFiwwPD09DTmzJlj7N+/33jhhReM0qVLG1FRUWZHu6OXXnrJ8PPzM9asWWOcP3/e9nXjxg3bMv379zeqVq1qrFq1ytixY4fRrFkzo1mzZiamzt6tV4c0jMKxDtu2bTPc3NyM8ePHG0eOHDHmzZtnlChRwvjqq69sy0ycONEoXbq08dNPPxl79+41HnnkEaN69epGQkKCickz6tWrl1G5cmXjl19+MU6cOGEsWrTIKF++vDFs2DDbMs64HrGxscauXbuMXbt2GZKM999/39i1a5dx6tSpHGd+8MEHjQYNGhhbt241NmzYYISGhhpPPvmkWavkMIXx76mgvfrqq8aaNWuMEydOGBs3bjTCw8ON8uXLGxcvXjQMg212J0Vl3DNDWlqaUbVqVWP48OGZ5hXl37d169YZS5YsueP8uLg4Y82aNQWYqOD95z//MTp16nTH+S+99JJhsVgKMFHBmz59uvHLL7/ccf7IkSONvn37FmAi53H69Gnjxx9/NOLi4syOkmvFpjwahmF89NFHRtWqVQ0PDw+jSZMmxpYtW8yO9LckZfk1e/Zs2zIJCQnGyy+/bJQpU8YoUaKE0a1bN+P8+fPmhc6B29/sFpZ1WLx4sVG3bl3D09PTqFWrlvHZZ59lmG+1Wo1Ro0YZFStWNDw9PY127doZhw4dMilt1mJiYoxBgwYZVatWNby8vIwaNWoYb775ppGUlGRbxhnXY/Xq1Vn+LfTq1SvHma9cuWI8+eSTRqlSpQxfX1+jT58+RmxsrAlr41iF9e+pIPXo0cMICAgwPDw8jMqVKxs9evQwjh49apvPNruzojDumWHZsmWGpCy3Bb9vAAozi2EU8eMHAAAAAAB5VizOeQQAAAAA5A3lEQAAAACQLcojAAAAACBblEcAAAAAQLYojwAAAACAbFEeAQAAAADZojwCAAAARYDVatU777yjkJAQeXp6qmrVqho/frxOnjwpi8WiBQsWqHnz5vLy8lLdunW1du1asyOjkKE8AgAAAEXAyJEjNXHiRI0aNUr79+/X/PnzVbFiRdv8119/Xa+++qp27dqlZs2aqUuXLrpy5YqJiVHYWAzDMMwOARSU3r176/r16/rxxx8d/tzBwcEaPHiwBg8e7PDnBgAA+DuxsbHy9/fXtGnT9Pzzz2eYd/LkSVWvXl0TJ07U8OHDJUmpqamqXr26/vWvf2nYsGFmREYhxJ5HFLg2bdrke8G6eXjG7t278/V1AAAAnMGBAweUlJSkdu3a3XGZZs2a2b53c3NT48aNdeDAgYKIhyKC8ginYxiGUlNTzY4BAABQaHh7e5sdAcUA5REFqnfv3lq7dq0++OADWSwWWSwWzZkzRxaLRUuWLFGjRo3k6empDRs2yGq1asKECapevbq8vb0VFhamhQsX2p7r2rVr6tmzp/z9/eXt7a3Q0FDNnj1bklS9enVJUoMGDWSxWNSmTZsMOcaOHSt/f3/5+vqqf//+Sk5Ots1r06aNBg4cqIEDB8rPz0/ly5fXqFGjdOsR3hcvXlSXLl3k7e2t6tWra968efm41QA4k6VLl6ply5YqXbq0ypUrp//7v//TsWPHbPM3bdqk+vXry8vLS40bN9aPP/6Y6UiIP/74Q506dVKpUqVUsWJFPfPMM7p8+bIJawOgqAgNDZW3t7dWrlx5x2W2bNli+z41NVURERGqXbt2QcRDEeFmdgAULx988IEOHz6sunXraty4cZKkffv2SZJGjBih9957TzVq1FCZMmU0YcIEffXVV5oxY4ZCQ0O1bt06Pf300/L391fr1q1tJ4MvWbJE5cuX19GjR5WQkCBJ2rZtm5o0aaIVK1bo7rvvloeHhy3DypUr5eXlpTVr1ujkyZPq06ePypUrp/Hjx9uW+fLLL9W3b19t27ZNO3bs0AsvvKCqVauqX79+ktJL8Llz57R69Wq5u7vrlVde0cWLFwtqMwIwUXx8vIYOHap69eopLi5Oo0ePVrdu3bR7927FxcWpS5cu6ty5s+bPn69Tp05lOkz/+vXratu2rZ5//nlNmTJFCQkJGj58uB5//HGtWrXKnJUCUOh5eXlp+PDhGjZsmDw8PNSiRQtdunRJ+/btsx3K+vHHHys0NFS1a9fWlClTdO3aNT333HMmJ0ehYgAFrHXr1sagQYNsj1evXm1IMn788UfbtMTERKNEiRLGpk2bMvxs3759jSeffNIwDMPo0qWL0adPnyxf48SJE4YkY9euXRmm9+rVyyhbtqwRHx9vmzZ9+nSjVKlSRlpami1f7dq1DavValtm+PDhRu3atQ3DMIxDhw4Zkoxt27bZ5h84cMCQZEyZMiXnGwJAkXDp0iVDkvH7778b06dPN8qVK2ckJCTY5n/++ecZxqO3337b6NChQ4bnOH36tCHJOHToUEFGB1DEpKWlGf/+97+NatWqGe7u7kbVqlWN//znP7b3RfPnzzeaNGlieHh4GHXq1DFWrVpldmQUMux5hNNo3Lix7fujR4/qxo0bat++fYZlkpOT1aBBA0nSSy+9pEcffVQ7d+5Uhw4d1LVrVzVv3jzb1wkLC1OJEiVsj5s1a6a4uDidPn1a1apVkyTdd999slgsGZaZPHmy0tLSdODAAbm5ualRo0a2+bVq1VLp0qVztd4ACpcjR45o9OjR2rp1qy5fviyr1SpJioyM1KFDh1SvXj15eXnZlm/SpEmGn9+zZ49Wr16tUqVKZXruY8eOqWbNmvm7AgCKLBcXF7355pt68803M0w/efKkJKl27draunWrCclQVFAe4TRKlixp+z4uLk6S9Ouvv6py5coZlvP09JQkderUSadOndJvv/2m5cuXq127dhowYIDee++9ggsNoNjp0qWLqlWrps8//1yBgYGyWq2qW7duhnOn/87NQ1snTZqUaV5AQICj4wIA4DCURxQ4Dw8PpaWl/e0yderUkaenpyIjI9W6des7Lufv769evXqpV69eatWqlV5//XW99957tnMcs3qdPXv2KCEhwXZVsi1btqhUqVIKCgqyLXP7p3JbtmxRaGioXF1dVatWLdtJ5vfee68k6dChQ7p+/XqO1h9A4XXlyhUdOnRIn3/+uVq1aiVJ2rBhg23+XXfdpa+++kpJSUm2D7q2b9+e4TkaNmyo77//XsHBwXJz459hAEDhwdVWUeCCg4O1detWnTx5MsMhX7fy8fHRa6+9piFDhujLL7/UsWPHtHPnTn300Uf68ssvJUmjR4/WTz/9pKNHj2rfvn365ZdfbFcMq1Chgry9vbV06VJduHBB0dHRtudOTk5W3759tX//fv32228aM2aMBg4cKBeXv/4cIiMjNXToUB06dEhff/21PvroIw0aNEhS+pvDBx98UC+++KK2bt2qiIgIPf/881wiGygGypQpo3Llyumzzz7T0aNHtWrVKg0dOtQ2/6mnnpLVatULL7ygAwcOaNmyZbajIW4eCj9gwABdvXpVTz75pLZv365jx45p2bJl6tOnT7YfrAFAbgQHB8swDNWvX9/sKCjkKI8ocK+99ppcXV1Vp04d+fv7KzIyMsvl3n77bY0aNUoTJkxQ7dq19eCDD+rXX3+13YbDw8NDI0eOVL169XT//ffL1dVVCxYskJR+49sPP/xQn376qQIDA/XII4/Ynrddu3YKDQ3V/fffrx49eujhhx/WW2+9leG1n332WSUkJKhJkyYaMGCABg0apBdeeME2f/bs2QoMDFTr1q3VvXt3vfDCC6pQoYKDtxQAZ+Pi4qIFCxYoIiJCdevW1ZAhQ/Tuu+/a5vv6+mrx4sXavXu36tevrzfffFOjR4+WJNt5kIGBgdq4caPS0tLUoUMH3XPPPRo8eLBKly6d4UMsAACcjcUwbrl5HQC1adNG9evX19SpU82OAqAImDdvnvr06aPo6GiOUAAAFGqcbAEAgAPNnTtXNWrUUOXKlbVnzx7bPRwpjgCAwo7yCACAA0VFRWn06NGKiopSQECA/vnPf2r8+PFmxwIAIM84bBUAAAAAkC3OzAcAAAAAZIvyCAAAAADIFuURAAAAAJAtyiMAAAAAIFuURwAAAABAtiiPAAAAAIBsFer7PFqtVp07d04+Pj6yWCxmxwFQCBmGodjYWAUGBsrFJeefpzH+AMir3I4/t2M8ApBXOR2PCnV5PHfunIKCgsyOAaAIOH36tKpUqZLj5Rl/ADiKvePP7RiPADhKduNRoS6PPj4+ktJX0tfX1+Q0AAqjmJgYBQUF2caTnGL8AZBXuR1/bsd4BCCvcjoeFeryePPQDF9fXwZLAHli76FejD8AHCWvh5oyHgFwlOzGIy6YAwAAAADIFuURAAAAAJAtyiMAAAAAIFuURwAAAABAtiiPAAAAAIBsUR4BAAAAANmiPAIAAAAAskV5BAAAAABki/IIAAAAAMgW5REAAAAAkC3KIwAAAAAgW6aWx+nTp6tevXry9fWVr6+vmjVrpiVLlpgZCQAAAACQBVPLY5UqVTRx4kRFRERox44datu2rR555BHt27fPzFgAAAAAgNu4mfniXbp0yfB4/Pjxmj59urZs2aK7777bpFQAAAAAgNuZWh5vlZaWpu+++07x8fFq1qxZlsskJSUpKSnJ9jgmJqag4gEo5hh/ADgLxiMAZjH9gjm///67SpUqJU9PT/Xv318//PCD6tSpk+WyEyZMkJ+fn+0rKCiogNMCKK4YfwA4C8YjAGaxGIZhmBkgOTlZkZGRio6O1sKFCzVz5kytXbs2ywKZ1SdtQUFBio6Olq+vb0HGBlBExMTEyM/PL9txhPEHgKPldPy5HeMRAEfL6Xhk+mGrHh4eCgkJkSQ1atRI27dv1wcffKBPP/0007Kenp7y9PQs6IgAwPgDwGkwHgEwi+mHrd7OarVm+DQNAAAAAGA+U/c8jhw5Up06dVLVqlUVGxur+fPna82aNVq2bJmZsQAAAAAAtzG1PF68eFHPPvuszp8/Lz8/P9WrV0/Lli1T+/btzYwFAAAAALiNqeXxiy++MPPlAQAAAAA55HTnPAIAAAAAnA/lEQAAAACQLcojAAAAACBblEcAAAAAQLYojwAAAACAbFEeAQAAAADZojwCAAAAALKVq/KYmpqqFStW6NNPP1VsbKwk6dy5c4qLi3NoOAAAAACAc3Cz9wdOnTqlBx98UJGRkUpKSlL79u3l4+OjSZMmKSkpSTNmzMiPnAAAAAAAE9m953HQoEFq3Lixrl27Jm9vb9v0bt26aeXKlQ4NBwAAAABwDnbveVy/fr02bdokDw+PDNODg4N19uxZhwUDAAAAADgPu/c8Wq1WpaWlZZp+5swZ+fj4OCQUAAAAAMC52F0eO3TooKlTp9oeWywWxcXFacyYMercubMjswEAAAAAnITdh61OnjxZHTt2VJ06dZSYmKinnnpKR44cUfny5fX111/nR0YAAAAAgMnsLo9VqlTRnj179M0332jPnj2Ki4tT37591bNnzwwX0AEAAAAAFB12l0dJcnNzU8+ePdWzZ09H5wEAAAAAOCG7z3mcMGGCZs2alWn6rFmzNGnSJIeEAgAAAAA4F7vL46effqpatWplmn733XdrxowZDgkFAAAAAHAudpfHqKgoBQQEZJru7++v8+fPOyQUAAAAAMC52F0eg4KCtHHjxkzTN27cqMDAQIeEAgAAAAA4F7svmNOvXz8NHjxYKSkpatu2rSRp5cqVGjZsmF599VWHBwQAAAAAmM/u8vj666/rypUrevnll5WcnCxJ8vLy0vDhwzVy5EiHBwQAAAAAmM/u8mixWDRp0iSNGjVKBw4ckLe3t0JDQ+Xp6Zkf+QAAAAAATiBX93mUpFKlSunee+91ZBYAAAAAgJOyuzzGx8dr4sSJWrlypS5evCir1Zph/vHjxx0WDgAAAADgHOwuj88//7zWrl2rZ555RgEBAbJYLPmRCwAAAADgROwuj0uWLNGvv/6qFi1a5EceAAAAAIATsvs+j2XKlFHZsmXzIwsAAAAAwEnZXR7ffvttjR49Wjdu3MiPPAAAAAAAJ2T3YauTJ0/WsWPHVLFiRQUHB8vd3T3D/J07dzosHAAAAADAOdhdHrt27ZoPMQAAAAAAzszu8jhmzJj8yAEAAAAAcGJ2n/MoSdevX9fMmTM1cuRIXb16VVL64apnz551aDgAAAAAgHOwe8/j3r17FR4eLj8/P508eVL9+vVT2bJltWjRIkVGRmru3Ln5kRMAAAAAYCK79zwOHTpUvXv31pEjR+Tl5WWb3rlzZ61bt86h4QAAAAAAzsHu8rh9+3a9+OKLmaZXrlxZUVFRDgkFAAAAAHAudpdHT09PxcTEZJp++PBh+fv7OyQUAAAAAMC52F0eH374YY0bN04pKSmSJIvFosjISA0fPlyPPvqowwMCAAAAAMxnd3mcPHmy4uLiVKFCBSUkJKh169YKCQmRj4+Pxo8fb9dzTZgwQffee698fHxUoUIFde3aVYcOHbI3EgAAAAAgn9l9tVU/Pz8tX75cGzZs0N69exUXF6eGDRsqPDzc7hdfu3atBgwYoHvvvVepqal644031KFDB+3fv18lS5a0+/kAAAAAAPnD7vJ4U8uWLdWyZcs8vfjSpUszPJ4zZ44qVKigiIgI3X///Xl6bgAAAACA4+SoPH744Yc5fsJXXnkl12Gio6MlSWXLls1yflJSkpKSkmyPs7pwDwDkB8YfAM6C8QiAWXJUHqdMmZLh8aVLl3Tjxg2VLl1aknT9+nWVKFFCFSpUyHV5tFqtGjx4sFq0aKG6detmucyECRM0duzYXD0/AOQF4w8AZ8F4BMAsFsMwDHt+YP78+frkk0/0xRdf6K677pIkHTp0SP369dOLL76onj175irISy+9pCVLlmjDhg2qUqVKlstk9UlbUFCQoqOj5evrm6vXBVC8xcTEyM/PL9txhPEHgKPldPy5HeMRAEfL6Xhk9zmPo0aN0sKFC23FUZLuuusuTZkyRY899liuyuPAgQP1yy+/aN26dXcsjlL6PSY9PT3tfn4AyCvGHwDOgvEIgFnsLo/nz59XampqpulpaWm6cOGCXc9lGIb+9a9/6YcfftCaNWtUvXp1e+MAAAAAAAqA3fd5bNeunV588UXt3LnTNi0iIkIvvfSS3bfrGDBggL766ivNnz9fPj4+ioqKUlRUlBISEuyNBQAAAADIR3aXx1mzZqlSpUpq3Lix7bCJJk2aqGLFipo5c6ZdzzV9+nRFR0erTZs2CggIsH1988039sYCAAAAAOQjuw9b9ff312+//abDhw/r4MGDkqRatWqpZs2adr+4ndfqAQAAAACYxO7yeFPNmjVzVRgBAAAAAIWP3eUxLS1Nc+bM0cqVK3Xx4kVZrdYM81etWuWwcAAAAAAA52B3eRw0aJDmzJmjhx56SHXr1pXFYsmPXAAAAAAAJ2J3eVywYIG+/fZbde7cOT/yAAAAAACckN1XW/Xw8FBISEh+ZAEAAAAAOCm7y+Orr76qDz74gCulAgAAAEAxYvdhqxs2bNDq1au1ZMkS3X333XJ3d88wf9GiRQ4LBwAAAABwDnaXx9KlS6tbt275kQUAAAAA4KTsLo+zZ8/OjxwAAAAAACdm9zmPkpSamqoVK1bo008/VWxsrCTp3LlziouLc2g4AAAAAIBzsHvP46lTp/Tggw8qMjJSSUlJat++vXx8fDRp0iQlJSVpxowZ+ZETAAAAAGAiu/c8Dho0SI0bN9a1a9fk7e1tm96tWzetXLnSoeEAAAAAAM7B7j2P69ev16ZNm+Th4ZFhenBwsM6ePeuwYAAAAAAA52H3nker1aq0tLRM08+cOSMfHx+HhAIAAAAAOBe7y2OHDh00depU22OLxaK4uDiNGTNGnTt3dmQ2AAAAAICTsPuw1cmTJ6tjx46qU6eOEhMT9dRTT+nIkSMqX768vv766/zICAAAAAAwmd3lsUqVKtqzZ48WLFigvXv3Ki4uTn379lXPnj0zXEAHAAAAAFB02F0eJcnNzU1PP/20o7MAAAAAAJxUrsrjoUOH9NFHH+nAgQOSpNq1a2vgwIGqVauWQ8MBAAAAAJyD3RfM+f7771W3bl1FREQoLCxMYWFh2rlzp+655x59//33+ZERAAAAAGAyu/c8Dhs2TCNHjtS4ceMyTB8zZoyGDRumRx991GHhAAAAAADOwe49j+fPn9ezzz6bafrTTz+t8+fPOyQUAAAAAMC52F0e27Rpo/Xr12eavmHDBrVq1cohoQAAAAAAzsXuw1YffvhhDR8+XBEREbrvvvskSVu2bNF3332nsWPH6ueff86wLAAAAACg8LMYhmHY8wMuLjnbWWmxWJSWlparUDkVExMjPz8/RUdHy9fXN19fC0DRlNtxhPEHQF45ahxhPAKQVzkdR+ze82i1WvMUDAAAAABQ+Nh9zuOtEhMTHZUDAAAAAODE7C6PaWlpevvtt1W5cmWVKlVKx48flySNGjVKX3zxhcMDAgAAAADMZ/dhq+PHj9eXX36pd955R/369bNNr1u3rqZOnaq+ffs6NCAAAEBuBI/4tcBf8+TEhwr8NQGgoNi953Hu3Ln67LPP1LNnT7m6utqmh4WF6eDBgw4NBwAAAABwDnbveTx79qxCQkIyTbdarUpJSXFIKAAAULiwlw8Aij679zzWqVNH69evzzR94cKFatCggUNCAQAAAACci917HkePHq1evXrp7NmzslqtWrRokQ4dOqS5c+fql19+yY+MAAAAAACT2V0eH3nkES1evFjjxo1TyZIlNXr0aDVs2FCLFy9W+/bt8yMjYAozDsGCY3AoG4o6s8Yn/raA4oX3QoVXfo3XdpdHSWrVqpWWL1/u6CwAAAAAACeVq/IIAACAwos9SoUXRwDATDkqj2XKlJHFYsnRE169ejVPgQAAAAAAzidH5XHq1Km2769cuaJ///vf6tixo5o1ayZJ2rx5s5YtW6ZRo0blS0gAQPHBLR8AAHBOOSqPvXr1sn3/6KOPaty4cRo4cKBt2iuvvKJp06ZpxYoVGjJkSI5ffN26dXr33XcVERGh8+fP64cfflDXrl1znh4AAAAAUCDsPudx2bJlmjRpUqbpDz74oEaMGGHXc8XHxyssLEzPPfecunfvbm8UAEAecdVOAACQU3aXx3Llyumnn37Sq6++mmH6Tz/9pHLlytn1XJ06dVKnTp3sjZBnnCReOPFmEwAAADCP3eVx7Nixev7557VmzRo1bdpUkrR161YtXbpUn3/+ucMD3iopKUlJSUm2xzExMfn6egBwk6PGH87nA5BXvB8CYBYXe3+gd+/e2rhxo3x9fbVo0SItWrRIvr6+2rBhg3r37p0PEf8yYcIE+fn52b6CgoLy9fUA4CbGHwDOgvEIgFnsLo+S1LRpU82bN087d+7Uzp07NW/ePNteyPw0cuRIRUdH275Onz6d768JABLjDwDnwXgEwCx2H7ZqJk9PT3l6epodA0AxxPgDwFkwHgEwS672PAIAAAAAihdT9zzGxcXp6NGjtscnTpzQ7t27VbZsWVWtWtXEZAAAAACAW5laHnfs2KEHHnjA9njo0KGSpF69emnOnDkmpQIAAAAA3M7U8timTRsZhmFmBAAAAABADuSoPHbv3j3HT7ho0aJchwEAAAAAOKcclUc/P7/8zgEAAAAAcGI5Ko+zZ8/O7xwAAAAAACfGrToAAAAAANnK1QVzFi5cqG+//VaRkZFKTk7OMG/nzp0OCQYAAAAAcB5273n88MMP1adPH1WsWFG7du1SkyZNVK5cOR0/flydOnXKj4wAAAAAAJPZXR4/+eQTffbZZ/roo4/k4eGhYcOGafny5XrllVcUHR2dHxkBAAAAACazuzxGRkaqefPmkiRvb2/FxsZKkp555hl9/fXXjk0HAAAAAHAKdpfHSpUq6erVq5KkqlWrasuWLZKkEydOyDAMx6YDAAAAADgFu8tj27Zt9fPPP0uS+vTpoyFDhqh9+/bq0aOHunXr5vCAAAAAAADz2X211c8++0xWq1WSNGDAAJUrV06bNm3Sww8/rBdffNHhAQEAAAAA5rO7PLq4uMjF5a8dlk888YSeeOIJh4YCAAAAADiXHJXHvXv3qm7dunJxcdHevXv/dtl69eo5JBgAAAAAwHnkqDzWr19fUVFRqlChgurXry+LxZLlxXEsFovS0tIcHhIAAAAAYK4clccTJ07I39/f9j0AAAAAoHjJUXmsVq2a7ftTp06pefPmcnPL+KOpqanatGlThmUBAAAAAEWD3bfqeOCBB2z3ebxVdHS0HnjgAYeEAgAAAAA4F7vLo2EYslgsmaZfuXJFJUuWdEgoAAAAAIBzyfGtOrp37y4p/aI4vXv3lqenp21eWlqa9u7dq+bNmzs+IQAAAADAdDkuj35+fpLS9zz6+PjI29vbNs/Dw0P33Xef+vXr5/iEAAAAAADT5bg8zp4923Z7jo8++kilSpXKt1AAAAAAAOdi1zmPhmFo3rx5On/+fH7lAQAAAAA4IbvKo4uLi0JDQ3XlypX8ygMAAAAAcEJ2X2114sSJev311/XHH3/kRx4AAAAAgBPK8TmPNz377LO6ceOGwsLC5OHhkeHCOZKyvAckAAAAAKBws7s8Tp06NR9iAAAAAACcmd3lsVevXvmRAwAAAADgxOwuj7dKTExUcnJyhmm+vr55CgQAAAAAcD52XzAnPj5eAwcOVIUKFVSyZEmVKVMmwxcAAAAAoOixuzwOGzZMq1at0vTp0+Xp6amZM2dq7NixCgwM1Ny5c/MjIwAAAADAZHYftrp48WLNnTtXbdq0UZ8+fdSqVSuFhISoWrVqmjdvnnr27JkfOQEAAAAAJrJ7z+PVq1dVo0YNSennN968NUfLli21bt06x6YDAAAAADgFu8tjjRo1dOLECUlSrVq19O2330pK3yNZunRph4YDAAAAADgHu8tjnz59tGfPHknSiBEj9PHHH8vLy0tDhgzR66+/7vCAAAAAAADz2X3O45AhQ2zfh4eH6+DBg4qIiFBISIjq1avn0HAAAAAAAOeQ4/JotVr17rvv6ueff1ZycrLatWunMWPGqFq1aqpWrVp+ZgQAAAAAmCzHh62OHz9eb7zxhkqVKqXKlSvrgw8+0IABA/IzGwAAAADASeS4PM6dO1effPKJli1bph9//FGLFy/WvHnzZLVa8zMfAAAAAMAJ5Lg8RkZGqnPnzrbH4eHhslgsOnfuXJ5DfPzxxwoODpaXl5eaNm2qbdu25fk5AQAAAACOk+PymJqaKi8vrwzT3N3dlZKSkqcA33zzjYYOHaoxY8Zo586dCgsLU8eOHXXx4sU8PS8AAAAAwHFyfMEcwzDUu3dveXp62qYlJiaqf//+KlmypG3aokWL7Arw/vvvq1+/furTp48kacaMGfr11181a9YsjRgxwq7nAgAAAADkjxyXx169emWa9vTTT+fpxZOTkxUREaGRI0faprm4uCg8PFybN2/OtHxSUpKSkpJsj2NiYvL0+gCQU4w/AJwF4xEAs1gMwzDMevFz586pcuXK2rRpk5o1a2abPmzYMK1du1Zbt27NsPxbb72lsWPHZnqe6Oho+fr65nteAEVPTEyM/Pz8sh1HGH8AOFpOx5/bMR4BcLScjkc5PufRGYwcOVLR0dG2r9OnT5sdCUAxwfgDwFkwHgEwS44PW80P5cuXl6urqy5cuJBh+oULF1SpUqVMy3t6emY45xIACgrjDwBnwXgEwCym7nn08PBQo0aNtHLlSts0q9WqlStXZjiMFQAAAABgLlP3PErS0KFD1atXLzVu3FhNmjTR1KlTFR8fb7v6KgAAAADAfKaXxx49eujSpUsaPXq0oqKiVL9+fS1dulQVK1Y0OxoAAAAA4E+ml0dJGjhwoAYOHGh2DAAAAADAHRSqq60CAAAAAMxBeQQAAAAAZIvyCAAAAADIFuURAAAAAJAtyiMAAAAAIFuURwAAAABAtiiPAAAAAIBsUR4BAAAAANmiPAIAAAAAskV5BAAAAABki/IIAAAAAMgW5REAAAAAkC3KIwAAAAAgW5RHAAAAAEC2KI8AAAAAgGxRHgEAAAAA2aI8AgAAAACyRXkEAAAAAGSL8ggAAAAAyBblEQAAAACQLcojAAAAACBblEcAAAAAQLbczA6QF4ZhSJJiYmJMTgKgsLo5ftwcT3KK8QdAXuV2/Lkd4xGAvMrpeFSoy2NsbKwkKSgoyOQkAAq72NhY+fn52bW8xPgDIO/sHX+y+nmJ8QhA3mU3HlmMvH7cZSKr1apz587Jx8dHFovF7Dimi4mJUVBQkE6fPi1fX1+z4zgFtklmbJOMDMNQbGysAgMD5eKS8yP5i/v4w+9R9thGOVOct1Nux5/bFffx6FbF+ffp77BdMmObZJTT8ahQ73l0cXFRlSpVzI7hdHx9ffkjuA3bJDO2yV9y84k/4086fo+yxzbKmeK6nfKyx/EmxqPMiuvvU3bYLpmxTf6Sk/GIC+YAAAAAALJFeQQAAAAAZIvyWIR4enpqzJgx8vT0NDuK02CbZMY2gSPwe5Q9tlHOsJ3gSPw+ZY3tkhnbJHcK9QVzAAAAAAAFgz2PAAAAAIBsUR4BAAAAANmiPAIAAAAAskV5BAAAAABki/IIAEA+4Zp0AICihPIIAEA+8fT01IEDB8yOAQCAQ7iZHQC5t3//fk2bNk2bN29WVFSUJKlSpUpq1qyZBg4cqDp16pic0Fznzp3Tp59+qqNHjyogIEDPP/+8atWqZXYs0yUlJUkS9zWCXRISEhQREaGyZctmGlsSExP17bff6tlnnzUpnfmGDh2a5fS0tDRNnDhR5cqVkyS9//77BRnL6ezcuVNlypRR9erVJUn//e9/NWPGDEVGRqpatWoaOHCgnnjiCZNTojDhvdDf471Q1ngvlHvc57GQWrJkibp27aqGDRuqY8eOqlixoiTpwoULWr58uSIiIvTTTz+pY8eOJictOCVKlNCpU6fk7++v/fv3q3nz5vL391eDBg30+++/KzIyUps3b1a9evXMjlrgli9frilTpmjz5s2KiYmRJPn6+qpZs2YaOnSowsPDTU4IZ3b48GF16NBBkZGRslgsatmypRYsWKCAgABJ6eNOYGCg0tLSTE5qHhcXF4WFhal06dIZpq9du1aNGzdWyZIlZbFYtGrVKnMCOomwsDBNnjxZ4eHhmjlzpl555RX169dPtWvX1qFDhzRz5kx98MEHeu6558yOikKA90KZ8V7ozngv5BiUx0IqLCxMjzzyiMaNG5fl/LfeekuLFi3S3r17CziZeVxcXBQVFaUKFSqoa9euslqtWrRokdzc3GS1WtWzZ0/FxcVp8eLFZkctUF9++aWef/55PfbYY5n+cf3f//6nhQsX6osvvtAzzzxjclI4q27duiklJUVz5szR9evXNXjwYO3fv19r1qxR1apVKY+SJk6cqM8++0wzZ85U27ZtbdPd3d21Z8+eYr/346YSJUrowIEDqlatmho2bKiXXnpJ/fr1s82fP3++xo8fr3379pmYEoUF74Uy471Q1ngv5EAGCiUvLy/j4MGDd5x/8OBBw8vLqwATmc9isRgXLlwwDMMwgoKCjHXr1mWYv3PnTiMgIMCMaKYKDQ01pk2bdsf5H3/8sRESElKAiVDYVKhQwdi7d6/tsdVqNfr3729UrVrVOHbsmBEVFWW4uLiYmNA5bNu2zahZs6bx6quvGsnJyYZhGIabm5uxb98+k5M5j3Llyhk7duwwDCP992r37t0Z5h89etTw9vY2IxoKId4LZcZ7oazxXshxuGBOIRUcHKxff/31jvN//fVXVatWrQATmc9ischisUhK/+TNz88vw/zSpUvr2rVrZkQzVWRk5N8eitGuXTudOXOmABOhsElISJCb21+nyFssFk2fPl1dunRR69atdfjwYRPTOY97771XERERunTpkho3bqw//vjDNiYhXadOnTR9+nRJUuvWrbVw4cIM87/99luFhISYEQ2FEO+FMuO9UNZ4L+Q4XDCnkBo3bpyeeuoprVmzRuHh4Rl2v69cuVJLly7V/PnzTU5ZsAzDUM2aNWWxWBQXF6e9e/dmOKb/6NGjqlSpkokJzXH33Xfriy++0DvvvJPl/FmzZnFIHf5WrVq1tGPHDtWuXTvD9GnTpkmSHn74YTNiOaVSpUrpyy+/1IIFCxQeHl6sD+XNyqRJk9SiRQu1bt1ajRs31uTJk7VmzRrbOY9btmzRDz/8YHZMFBK8F8qM90JZ472Q41AeC6l//vOfqly5sj788ENNnjw50xXG1qxZo2bNmpmcsmDNnj07w+PbP73esmWLunXrVpCRnMLkyZP1f//3f1q6dGmW/7geP378bz+5Bbp166avv/46y3NBpk2bJqvVqhkzZpiQzHk98cQTatmypSIiIordno+/ExgYqF27dmnixIlavHixDMPQtm3bdPr0abVo0UIbN25U48aNzY6JQoL3QpnxXihrvBdyHC6YAxQDJ0+e1PTp07Vly5ZM/7j2799fwcHB5gYEAADIR7wXcgzKIwAAAAAgW1wwp4h64403uE/WbdgmAAAUH/y7nxnbBHlFeSyizpw5o5MnT5odw6mwTbLWq1evDPelAwCgKODf/czYJlnjvVDOccGcImru3LlmR3A6bJOsBQYGysWFz5EAAEUL/+5nxjbJGu+Fco5zHguxy5cva9asWdq8eXOGE3+bN2+u3r17y9/f3+SEBY9tAqAgrVmzRg888ICuXbum0qVL5/p5goODNXjwYA0ePNhh2YDigH/3M2ObID9RsQup7du3q2bNmvrwww/l5+en+++/X/fff7/8/Pz04Ycf2u7LVpywTXLn9OnTnP8A5FCbNm0oeICT4N/9zNgmucN7oZxjz2Mhdd999yksLEwzZsyQxWLJMM8wDPXv31979+7V5s2bTUpY8NgmubNnzx41bNiQm5kDOdCmTRvVr19fU6dOlcSeR8BM/LufGdskd3gvlHOc81hI7dmzR3PmzMk0MEiSxWLRkCFD1KBBAxOSmYdtkrWff/75b+cfP368gJIAhVvv3r21du1arV27Vh988IGkv27IHRERoeHDh2v//v2qX7++Zs+erbvuukuSdOzYMQ0dOlRbtmxRfHy8ateurQkTJig8PNy0dQGKAv7dz4xtkjXeCzkO5bGQqlSpkrZt26ZatWplOX/btm2qWLFiAacyF9ska127dpXFYtHfHWSQ1T8yADL64IMPdPjwYdWtW1fjxo2TJO3bt0+S9Oabb2ry5Mny9/dX//799dxzz2njxo2SpLi4OHXu3Fnjx4+Xp6en5s6dqy5duujQoUOqWrWqaesDFHb8u58Z2yRrvBdyHMpjIfXaa6/phRdeUEREhNq1a2cbCC5cuKCVK1fq888/13vvvWdyyoLFNslaQECAPvnkEz3yyCNZzt+9e7caNWpUwKmAwsfPz08eHh4qUaKEKlWqJEk6ePCgJGn8+PFq3bq1JGnEiBF66KGHlJiYKC8vL4WFhSksLMz2PG+//bZ++OEH/fzzzxo4cGDBrwhQRPDvfmZsk6zxXshxKI+F1IABA1S+fHlNmTJFn3zyie0YbVdXVzVq1Ehz5szR448/bnLKgsU2yVqjRo0UERFxxwEzu0/iAGSvXr16tu8DAgIkSRcvXlTVqlUVFxent956S7/++qvOnz+v1NRUJSQkKDIy0qy4QJHAv/uZsU2yxnshx6E8FmI9evRQjx49lJKSosuXL0uSypcvL3d3d5OTmYdtktnrr7+u+Pj4O84PCQnR6tWrCzARUPTcOsbcPPTJarVKSt8TsHz5cr333nsKCQmRt7e3HnvsMSUnJ5uSFShK+Hc/M7ZJZrwXchzKYxHg7u5u+6Qb6dgmf2nVqtXfzi9ZsqTtcDsAf8/Dw8Puq/Ft3LhRvXv3Vrdu3SSlnwN58uTJfEgHFF/8u58Z2+QvvBdyHO7zCABADgUHB2vr1q06efKkLl++bNu7+HdCQ0O1aNEi7d69W3v27NFTTz2Vo58DAMDZUB4BAMih1157Ta6urqpTp478/f1zdN7i+++/rzJlyqh58+bq0qWLOnbsqIYNGxZAWgAAHMticHYoAAAAACAb7HkEAAAAAGSL8ggAAAAAyBblEQAAAACQLcojAAAAACBblEcUWgsXLtQ999wjb29vlStXTuHh4bYbwM6cOVO1a9eWl5eXatWqpU8++cT2c88995zq1aunpKQkSVJycrIaNGigZ5991pT1AAAAuJ3VatWECRNUvXp1eXt7KywsTAsXLpRhGAoPD1fHjh1187qXV69eVZUqVTR69GhJUlpamvr27Wv72bvuuksffPBBhufv3bu3unbtqvfee08BAQEqV66cBgwYoJSUFNsy58+f10MPPSRvb29Vr15d8+fPV3BwsKZOnVpg2wHOxc3sAEBunD9/Xk8++aTeeecddevWTbGxsVq/fr0Mw9C8efM0evRoTZs2TQ0aNNCuXbvUr18/lSxZUr169dKHH36osLAwjRgxQlOmTNGbb76p69eva9q0aWavFgAAgCRpwoQJ+uqrrzRjxgyFhoZq3bp1evrpp+Xv768vv/xS99xzjz788EMNGjRI/fv3V+XKlW3l0Wq1qkqVKvruu+9Urlw5bdq0SS+88IICAgL0+OOP215j9erVCggI0OrVq3X06FH16NFD9evXV79+/SRJzz77rC5fvqw1a9bI3d1dQ4cO1cWLF03ZHnAO3KoDhdLOnTvVqFEjnTx5UtWqVcswLyQkRG+//baefPJJ27R///vf+u2337Rp0yZJ0ubNm9W6dWuNGDFCEyZM0OrVq9WyZcsCXQcAAICsJCUlqWzZslqxYoWaNWtmm/7888/rxo0bmj9/vr777js9++yzGjx4sD766CPt2rVLoaGhd3zOgQMHKioqSgsXLpSUvudxzZo1OnbsmFxdXSVJjz/+uFxcXLRgwQIdPHhQtWvX1vbt29W4cWNJ0tGjRxUaGqopU6Zo8ODB+bcB4LTY84hCKSwsTO3atdM999yjjh07qkOHDnrsscfk4eGhY8eOqW/fvrZPzSQpNTVVfn5+tsfNmjXTa6+9prffflvDhw+nOAIAAKdx9OhR3bhxQ+3bt88w/eapNpL0z3/+Uz/88IMmTpyo6dOnZyqOH3/8sWbNmqXIyEglJCQoOTlZ9evXz7DM3XffbSuOkhQQEKDff/9dknTo0CG5ubmpYcOGtvkhISEqU6aMI1cVhQzlEYWSq6urli9frk2bNul///ufPvroI7355ptavHixJOnzzz9X06ZNM/3MTVarVRs3bpSrq6uOHj1aoNkBAAD+TlxcnCTp119/VeXKlTPM8/T0lCTduHFDERERcnV11ZEjRzIss2DBAr322muaPHmymjVrJh8fH7377rvaunVrhuXc3d0zPLZYLLJarY5eHRQhlEcUWhaLRS1atFCLFi00evRoVatWTRs3blRgYKCOHz+unj173vFn3333XR08eFBr165Vx44dNXv2bPXp06cA0wMAAGStTp068vT0VGRkpFq3bp3lMq+++qpcXFy0ZMkSde7cWQ899JDatm0rSdq4caOaN2+ul19+2bb8sWPH7Mpw1113KTU1Vbt27VKjRo0kpe8RvXbtWi7XCkUB5RGF0tatW7Vy5Up16NBBFSpU0NatW3Xp0iXVrl1bY8eO1SuvvCI/Pz89+OCDSkpK0o4dO3Tt2jUNHTpUu3bt0ujRo7Vw4UK1aNFC77//vgYNGqTWrVurRo0aZq8aAAAo5nx8fPTaa69pyJAhslqtatmypaKjo7Vx40b5+vqqfPnymjVrljZv3qyGDRvq9ddfV69evbR3716VKVNGoaGhmjt3rpYtW6bq1avrv//9r7Zv367q1avnOEOtWrUUHh6uF154QdOnT5e7u7teffVVeXt7y2Kx5OPaw5lxqw4USr6+vlq3bp06d+6smjVr6v/9v/+nyZMnq1OnTnr++ec1c+ZMzZ49W/fcc49at26tOXPmqHr16kpMTNTTTz+t3r17q0uXLpKkF154QQ888ICeeeYZpaWlmbxmAAAA0ttvv61Ro0ZpwoQJql27th588EH9+uuvCg4OVt++ffXWW2/ZzkccO3asKlasqP79+0uSXnzxRXXv3l09evRQ06ZNdeXKlQx7IXNq7ty5qlixou6//35169ZN/fr1k4+Pj7y8vBy6rig8uNoqAAAAgGydOXNGQUFBWrFihdq1a2d2HJiA8ggAAAAgk1WrVikuLk733HOPzp8/r2HDhuns2bM6fPhwpovtoHjgnEcAAAAAmaSkpOiNN97Q8ePH5ePjo+bNm2vevHkUx2KMPY8AAAAAgGxxwRwAAAAAQLYojwAAAACAbFEeAQAAAADZojwCAAAAALJFeQQAAAAAZIvyCAAAAADIFuURAAAAAJAtyiMAAAAAIFv/H95LLLKYUEBDAAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Regression:"],"metadata":{"id":"b9oADY-8t442"}},{"cell_type":"code","source":["temp_dataFrame = dataFrame_bigger.copy()\n","#temp_dataFrame[\"num\"].replace([1.0, 2.0, 3.0, 4.0], 1, inplace=True)\n","\n","y = temp_dataFrame.pop(\"num\")\n","\n","X_train, X_test, y_train, y_test = train_test_split(temp_dataFrame, y, test_size=0.12, random_state=42)"],"metadata":{"id":"VZf1xf4Mt8lU","executionInfo":{"status":"ok","timestamp":1684849976351,"user_tz":-600,"elapsed":16,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["poly = PolynomialFeatures(degree=2)\n","\n","X_train_poly = poly.fit_transform(X_train)\n","poly.fit_transform(X_test)\n","\n","poly.fit(X_train_poly, y_train)\n","\n","linReg = LinearRegression()\n","linReg.fit(X_train_poly, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"konYC7fvuKSq","executionInfo":{"status":"ok","timestamp":1684849976352,"user_tz":-600,"elapsed":17,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"a7a2baaf-a59b-4e43-a70d-fdf6a35bd674"},"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["y_train_preds = linReg.predict(poly.fit_transform(X_train))\n","y_test_preds = linReg.predict(poly.fit_transform(X_test))\n","\n","print(mean_squared_error(y_train, y_train_preds))\n","print(mean_absolute_error(y_train, y_train_preds))\n","\n","print(mean_squared_error(y_test, y_test_preds))\n","print(mean_absolute_error(y_test, y_test_preds))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_KHeI1HSvnM2","executionInfo":{"status":"ok","timestamp":1684849976654,"user_tz":-600,"elapsed":7,"user":{"displayName":"Wing Man Tsui","userId":"02269878414441236756"}},"outputId":"a114191b-3b2c-41c2-f9c4-7389bdd085fb"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["1.21072987110295\n","0.8626747710062791\n","3.389318630858085\n","1.4331509426788047\n"]}]}]}